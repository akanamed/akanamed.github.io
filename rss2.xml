<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GameServerDevelop</title>
    <link>https://akanamed.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>기록을 위한 블로그</description>
    <pubDate>Tue, 07 Jan 2020 06:35:48 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Create Game api server with node.js express-4</title>
      <link>https://akanamed.github.io/2020/01/07/express-apiserver-4/</link>
      <guid>https://akanamed.github.io/2020/01/07/express-apiserver-4/</guid>
      <pubDate>Tue, 07 Jan 2020 03:47:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;mongoDB를 이용하여, session 저장과 유저 정보를 저장한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>mongoDB를 이용하여, session 저장과 유저 정보를 저장한다.</p><a id="more"></a><!-- toc --><h2 id="install-mongoDB"><a href="#install-mongoDB" class="headerlink" title="install mongoDB"></a>install mongoDB</h2><p>Windows10 환경에서 개발진행하므로,<br><a href="https://www.mongodb.com/download-center/community" target="_blank" rel="external nofollow noopener noreferrer">MongoDB Download Center</a>에서 MSI를 다운받는다. 현재 시점에서 Version 은 4.2.2 이다.<br>설치부터 dbpath , 확인까지는 <a href="https://javacpro.tistory.com/64" target="_blank" rel="external nofollow noopener noreferrer">여기</a> 에 잘 나와있다.</p><h2 id="install-npm-package"><a href="#install-npm-package" class="headerlink" title="install npm package"></a>install npm package</h2><p>세션 및 DB 저장을 위해, 아래 패키지들을 설치하고 package.json을 확인하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express-session connect-mongodb-session mongoose --save</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; package.json</span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;connect-mongodb-session&quot;: &quot;^2.2.0&quot;,</span><br><span class="line">    &quot;express-session&quot;: &quot;^1.17.0&quot;,</span><br><span class="line">    &quot;mongoose&quot;: &quot;^5.8.4&quot;,</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/express-session" target="_blank" rel="external nofollow noopener noreferrer">express-session</a> : 세션관리 미들웨어<br><a href="https://mongoosejs.com/" target="_blank" rel="external nofollow noopener noreferrer">mongoose</a> : 가장 유명한 MongoDB ODM(Object Document Mapping)<br><a href="https://github.com/mongodb-js/connect-mongodb-session#readme" target="_blank" rel="external nofollow noopener noreferrer">connect-mongodb-session</a> : 세션정보를 MongoDB에 저장. connect-mongo 를 좀 더 경량화 시킨 패키지라서 선택했는데 다양한 옵션을 더 주고 싶다면 connect-mongo 를 쓰면된다.</p><h2 id="유저-정보-저장"><a href="#유저-정보-저장" class="headerlink" title="유저 정보 저장"></a>유저 정보 저장</h2><p>/auth/create 로 요청이 들어올 때, mongoDB에 저장하는 기능을 구현한다.<br>예외처리가 완벽하지 않은 코드이지만, 기능 구현에 초점을 두었다.</p><h3 id="mongoose-connect"><a href="#mongoose-connect" class="headerlink" title="mongoose connect"></a>mongoose connect</h3><p>testdb로 connection 을 만들어준다.<br>단, connect가 성공하더라도 아직 데이터가 저장되기 전이므로 db 생성은 되지 않는다.</p><script src="//gist.github.com/cb4f2b596ef386436313c72c05c578a2.js"></script><p>app.js 에 서버 실행 시, mongodb 에 접속할 수 있도록 코드를 추가한다.</p><figure class="highlight objc"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import mongodb from <span class="string">'./db/mongo.connect'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">mongodb();</span><br></pre></td></tr></table></figure><p>아래 서버 실행으로 connect 가 정상임을 알 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br><span class="line"></span><br><span class="line">&gt; nodemon src/bin/www --<span class="built_in">exec</span> babel-node</span><br><span class="line"></span><br><span class="line">[nodemon] 2.0.2</span><br><span class="line">[nodemon] to restart at any time, enter `rs`</span><br><span class="line">[nodemon] watching dir(s): *.*</span><br><span class="line">[nodemon] watching extensions: js,mjs,json</span><br><span class="line">[nodemon] starting `babel-node src/bin/www`</span><br><span class="line">Server Listening on 3000</span><br><span class="line">connect mongodb</span><br></pre></td></tr></table></figure><h3 id="mongoose-create-user-schema"><a href="#mongoose-create-user-schema" class="headerlink" title="mongoose : create user schema"></a>mongoose : create user schema</h3><p>testdb 에 저장할 user schema 를 생성하고 , </p><script src="//gist.github.com/92a2ef8df58b1522c568007e4bacf369.js"></script><p>생성한 model을 매개변수로 받아 데이터 저장 및 조회하는 클래스를 만든다.<br>아래 create, findOne은 mongodb 의 메소드를 매핑한 함수이다.</p><script src="//gist.github.com/11c93cc334931a44db014f4d6d52f8c2.js"></script><h3 id="controller-의-handler-수정"><a href="#controller-의-handler-수정" class="headerlink" title="controller 의 handler 수정"></a>controller 의 handler 수정</h3><p><a href="https://akanamed.github.io/2020/01/06/Create-Game-api-server-with-node-js-express-3/">3편</a>에서 만들었던 auth.controller.js에 mongodb에 넣고 조회하는 로직을 추가한다.<br>authcontroller.createUser 와 authcontroller.login 부분이 UserRepository의 메소드를 호출해서<br>리턴하도록 수정되었다.</p><script src="//gist.github.com/5d8df091d0d5f3517a00a2e4c9177c8b.js"></script><p>findOne함수에서 주의해야 할 점은, 매개변수 user.userid에 값이 없을 때,<br>db에서 제일 첫번째 값을 불러오므로, 리턴 결과값이 null 인지 체크를 해서<br>null 이라면 fail로 넘겨줘야한다.</p><h3 id="postman으로-테스트"><a href="#postman으로-테스트" class="headerlink" title="postman으로 테스트"></a>postman으로 테스트</h3><p>서버 실행 후, postman으로 /auth/create , /auth/login 을 요청하면<br>아래와 같이 정상작동 됨을 알 수 있다.</p><img src="/2020/01/07/express-apiserver-4/post3.PNG" class title="This is an example image"><img src="/2020/01/07/express-apiserver-4/post4.PNG" class title="This is an example image"><p>서버 로그</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /auth/create 200 21.691 ms - 79</span><br><span class="line">abcde, 123456</span><br><span class="line">&#123;</span><br><span class="line">  _id: 5e141648e0936e75a4d4c8b3,</span><br><span class="line">  userid: <span class="string">'abcde'</span>,</span><br><span class="line">  password: <span class="string">'123456'</span>,</span><br><span class="line">  __v: 0</span><br><span class="line">&#125;</span><br><span class="line">GET /auth/login 302 18.499 ms - 41</span><br><span class="line">GET /auth/login/success 200 0.532 ms - 27</span><br></pre></td></tr></table></figure><p>mongodb - testdb collection 확인</p><img src="/2020/01/07/express-apiserver-4/mongodb.PNG" class title="This is an example image"><h2 id="Session-이란"><a href="#Session-이란" class="headerlink" title="Session 이란"></a>Session 이란</h2><p><a href="https://hahahoho5915.tistory.com/32" target="_blank" rel="external nofollow noopener noreferrer">쿠키와 세션의 특징 및 차이</a> 에 잘 나와있으며,<br>요약하면 세션은 접속중인 웹서버에 저장되며, 속도는 쿠키보다 느리지만 보안은 쿠키보다 좋다.</p><h3 id="mongoDBStore-생성"><a href="#mongoDBStore-생성" class="headerlink" title="mongoDBStore 생성"></a>mongoDBStore 생성</h3><p>mongodb에 세션을 저장하기 위해, 아래와 같이 코드를 작성한다.</p><script src="//gist.github.com/7113ce089a91709d5c835c234b22d032.js"></script><h3 id="express-session-미들웨어-등록"><a href="#express-session-미들웨어-등록" class="headerlink" title="express-session 미들웨어 등록"></a>express-session 미들웨어 등록</h3><figure class="highlight objc"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mongoStore, session &#125; from <span class="string">'./db/mongo.session'</span>;</span><br><span class="line"></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    secret: <span class="string">'ThIsIsMy$eCrEt'</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">        maxAge: <span class="number">1000</span> * <span class="number">60</span></span><br><span class="line">    &#125;,</span><br><span class="line">    store: mongoStore,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">false</span>,</span><br><span class="line">    unset: <span class="string">'destroy'</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>express-session 미들웨어는 store 옵션이 없으면 메모리에 저장이 되며,<br>store 에 redis, mongodb 의 스토리지 방식과 파일 방식으로 저장할 수 있다.<br>resave는 클라이언트가 접속할 때마다 sid를 새로 발급할 것인지의 여부. false로 지정<br>saveUninitialized는 세션이 store에 저장되기 전에 초기화 되지 않는 상태로 저장하는 옵션.<br>db에 값이 있을 때만 세션을 저장하므로, false로 지정해준다.<br>unset 옵션은 기본값이 ‘keep’이지만 ‘destroy’ 옵션을 줘서 logout 테스트 확인용으로<br>/auth/logout 요청 시 delete session; 으로 db에서 삭제하는 용도로 지정해줬다.<br>expire 타임은 1분으로 지정했으며, 1분이후에는 자동으로 db에서 삭제된다.</p><h3 id="요청-메소드-수정"><a href="#요청-메소드-수정" class="headerlink" title="요청 메소드 수정"></a>요청 메소드 수정</h3><p>auth.route.js 에 /logout 테스트용으로 추가해준다.</p><figure class="highlight objc"><figcaption><span>auth.route.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">authRouter.route(<span class="string">'/logout'</span>)</span><br><span class="line">    .get(authController.logout);</span><br></pre></td></tr></table></figure><p>auth.controller.js에 /auth/login 요청 시, db에 저장된 유저라면,<br>req.session.user에 값을 저장하고 로그인 성공 응답을 보내준다.<br>그리고, 세션이 mongodb에 저장되어 있을 때, logout요청이 들어오면 delete 로 세션을 삭제한다.</p><figure class="highlight objc"><figcaption><span>auth.controller.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">exports.login = (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> user = req.body;</span><br><span class="line">    console.log(<span class="string">'%s, %s'</span>, user.userid, user.password);</span><br><span class="line">    UserRepository.findOne(user.userid)</span><br><span class="line">        .then((searchUser) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (searchUser === null) &#123;</span><br><span class="line">                <span class="keyword">return</span> res.redirect(<span class="string">'/auth/login/fail'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(searchUser);</span><br><span class="line">            req.session.user = user;</span><br><span class="line">            <span class="keyword">return</span> res.redirect(<span class="string">'/auth/login/success'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">            console.log(error);</span><br><span class="line">            res.redirect(<span class="string">'/auth/login/fail'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.logout = (req, res, next) =&gt; &#123;</span><br><span class="line">    delete req.session;</span><br><span class="line">    <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">        message: <span class="string">'success logout'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="test-및-최종-폴더구조"><a href="#test-및-최종-폴더구조" class="headerlink" title="test 및 최종 폴더구조"></a>test 및 최종 폴더구조</h2><p>지금까지 작업한 최종 폴더구조는 다음과 같다.</p><img src="/2020/01/07/express-apiserver-4/folder2.PNG" class title="This is an example image"><p>db에 저장되어 있는 계정으로 /auth/login 요청을 하면, testdb/sessions 에<br>세션정보가 저장된다.</p><img src="/2020/01/07/express-apiserver-4/session.PNG" class title="This is an example image"><p>req.session 에 세션 정보가 저장되어 있으며,<br>로그인 성공 시 req.session.user 에 저장했던 값도 볼 수 있다.</p><p>Done.</p>]]></content:encoded>
      
      <comments>https://akanamed.github.io/2020/01/07/express-apiserver-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Create Game api server with node.js express-3</title>
      <link>https://akanamed.github.io/2020/01/06/Create-Game-api-server-with-node-js-express-3/</link>
      <guid>https://akanamed.github.io/2020/01/06/Create-Game-api-server-with-node-js-express-3/</guid>
      <pubDate>Mon, 06 Jan 2020 02:28:18 GMT</pubDate>
      <description>
      
        &lt;p&gt;router 를 분리하고 각 라우터에 대한 controller 를 만들자.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>router 를 분리하고 각 라우터에 대한 controller 를 만들자.</p><a id="more"></a><!-- toc --><h2 id="기본라우팅"><a href="#기본라우팅" class="headerlink" title="기본라우팅"></a>기본라우팅</h2><p>라우팅은 URI 또는 경로 및 특정한 HTTP 요청 메소드인 특정 엔드포인트에 대한<br>클라이언트 요청에 애플리케이션이 응답하는 방법을 결정하는 것을 말한다.</p><p>라우트 정의에는 다음과 같은 구조가 필요하다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.METHOD(PATH, HANDLER)</span><br></pre></td></tr></table></figure><p>METHOD는 get, post, put, delete의 HTTP 요청 메소드<br>PATH는 서버에서의 경로<br>HANDLER는 라우트가 일치할 때 실행되는 함수</p><p><a href="https://expressjs.com/ko/starter/basic-routing.html" target="_blank" rel="external nofollow noopener noreferrer">기본 라우팅</a> 과 <a href="https://expressjs.com/ko/guide/routing.html" target="_blank" rel="external nofollow noopener noreferrer">라우팅</a> 에 자세하게 나와있다.</p><h2 id="그럼-왜-라우팅을-분리하는가"><a href="#그럼-왜-라우팅을-분리하는가" class="headerlink" title="그럼 왜 라우팅을 분리하는가"></a>그럼 왜 라우팅을 분리하는가</h2><p>보통 애플리케이션 레벨 미들웨어나 라우터 레벨 미들웨어로 요청 메소드를 구현하게 되는데,<br>애플리케이션의 규모가 커지게 되면, 라우터의 분기가 많아지게 되고, 프로덕션 레벨에서<br>유지보수 및 오류 발생 시 추적을 쉽게 하기 위해서다.</p><h3 id="라우터-레벨-미들웨어로-분리"><a href="#라우터-레벨-미들웨어로-분리" class="headerlink" title="라우터 레벨 미들웨어로 분리"></a>라우터 레벨 미들웨어로 분리</h3><p><a href="https://expressjs.com/ko/guide/using-middleware.html#middleware.router" target="_blank" rel="external nofollow noopener noreferrer">라우터 레벨 미들웨어</a>로 분리해보자.</p><p>제일 먼저 로그인 관련 요청을 만들어야 하므로, /auth 경로에 대한 라우터를 만들자.<br>로그인 관련 모든 요청은 /auth 에서 시작한다고 가정한다.</p><ol><li><p>app.js에 라우터 미들웨어를 바인딩 한다.<br>routes 폴더 자체를 import 하게 되면 폴더 내에서 index.js를 먼저 찾는다.</p><figure class="highlight objc"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import indexRouter from <span class="string">'./routes'</span>;</span><br><span class="line">...</span><br><span class="line">app.use(<span class="string">'/'</span>, indexRouter);</span><br></pre></td></tr></table></figure></li><li><p>따라서 index.js에 라우터 미들웨어를 만들자.<br>아래는 /auth 경로에 대한 미들웨어 등록</p><figure class="highlight objc"><figcaption><span>routes/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import express from <span class="string">'express'</span>;</span><br><span class="line">import authRouter from <span class="string">'./auth.route'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routeHandler = express.Router();</span><br><span class="line"></span><br><span class="line">routeHandler.use(<span class="string">'/auth'</span>, authRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routeHandler;</span><br></pre></td></tr></table></figure></li><li><p>path별 요청에 따른 method들을 모듈화 해준다.</p><figure class="highlight objc"><figcaption><span>routes/auth.route.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import express from <span class="string">'express'</span>;</span><br><span class="line">import authController from <span class="string">'../controller/auth.controller'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> authRouter = express.Router();</span><br><span class="line"></span><br><span class="line">authRouter.route(<span class="string">'/create'</span>)</span><br><span class="line">    .post(authController.createUser);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> authRouter;</span><br></pre></td></tr></table></figure></li><li><p>/auth/create 로 요청이 들어오면 실행되는 핸들러를 별도 controller로 분리한다.</p><figure class="highlight objc"><figcaption><span>controller/auth.controller.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports.createUser = (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; userid &#125; = req.body;</span><br><span class="line">    <span class="keyword">const</span> &#123; password &#125; = req.body;</span><br><span class="line">    <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">        message: <span class="string">'success'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>최종 변경 된 폴더 구조</p><img src="/2020/01/06/Create-Game-api-server-with-node-js-express-3/routing.PNG" class title="This is an example image"></li></ol><h3 id="postman으로-라우터-미들웨어-테스트"><a href="#postman으로-라우터-미들웨어-테스트" class="headerlink" title="postman으로 라우터 미들웨어 테스트"></a>postman으로 라우터 미들웨어 테스트</h3><p>서버를 실행하자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br><span class="line">[nodemon] 2.0.2</span><br><span class="line">[nodemon] to restart at any time, enter `rs`</span><br><span class="line">[nodemon] watching dir(s): *.*</span><br><span class="line">[nodemon] watching extensions: js,mjs,json</span><br><span class="line">[nodemon] starting `babel-node src/bin/www`</span><br><span class="line">Server Listening on 3000</span><br></pre></td></tr></table></figure><p>현재 서버에 추가한 http 경로는 /auth/create 밖에 없다.<br>그 외는 404 error 를 리턴한다.</p><p>postman으로 아래와 같이 send를 서버로 보내면,</p><img src="/2020/01/06/Create-Game-api-server-with-node-js-express-3/post.PNG" class title="This is an example image"><p>req.body에 대한 예외처리는 되어 있지 않으므로,<br>message:success 응답코드가 정상적으로 리턴됨을 알 수 있다.</p><img src="/2020/01/06/Create-Game-api-server-with-node-js-express-3/post2.PNG" class title="This is an example image"><p>서버에서 요청 경로에 대한 로그</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /auth/create 200 16.240 ms - 21</span><br></pre></td></tr></table></figure><p>그 외 다른 http path를 테스트 해보면, /auth/create/1 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Error: Sorry cant find that!</span><br><span class="line">    at D:\<span class="built_in">test</span>-api-server\src/app.js:17:17</span><br><span class="line">    at Layer.handle [as handle_request] (D:\<span class="built_in">test</span>-api-server\node_modules\express\lib\router\layer.js:95:5)</span><br><span class="line">    at trim_prefix (D:\<span class="built_in">test</span>-api-server\node_modules\express\lib\router\index.js:317:13)</span><br><span class="line">    at D:\<span class="built_in">test</span>-api-server\node_modules\express\lib\router\index.js:284:7</span><br><span class="line">    at Function.process_params (D:\<span class="built_in">test</span>-api-server\node_modules\express\lib\router\index.js:335:12)</span><br><span class="line">    at Immediate.next (D:\<span class="built_in">test</span>-api-server\node_modules\express\lib\router\index.js:275:10)</span><br><span class="line">    at Immediate._onImmediate (D:\<span class="built_in">test</span>-api-server\node_modules\express\lib\router\index.js:635:15)</span><br><span class="line">    at processImmediate (internal/timers.js:441:21)</span><br><span class="line">    at process.topLevelDomainCallback (domain.js:130:23)</span><br><span class="line">POST /auth/create/1 404 16.541 ms - 21</span><br></pre></td></tr></table></figure><p>서버에서 해당 요청 경로에 대한 정의가 되어 있지 않으므로,<br>에러스택을 콘솔로 찍으면서 404 에러를 리턴한다.</p><h3 id="번외-babel-로-빌드-후-테스트"><a href="#번외-babel-로-빌드-후-테스트" class="headerlink" title="번외 : babel 로 빌드 후 테스트"></a>번외 : babel 로 빌드 후 테스트</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line">&gt; <span class="built_in">test</span>-api-server@0.0.0 build D:\<span class="built_in">test</span>-api-server</span><br><span class="line">&gt; babel src -w -d dist</span><br><span class="line"></span><br><span class="line">Successfully compiled 4 files with Babel.</span><br></pre></td></tr></table></figure><p>build 된 파일들의 폴더 구조는 src와 같다.</p><img src="/2020/01/06/Create-Game-api-server-with-node-js-express-3/babel.PNG" class title="This is an example image"><p>서버 실행 후, /auth/create로 요청을 보내면,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\<span class="built_in">test</span>-api-server&gt;node dist/bin/www</span><br><span class="line">Server Listening on 3000</span><br><span class="line">POST /auth/create 200 15.530 ms - 21</span><br></pre></td></tr></table></figure><p>잘 동작함을 알 수 있다.</p><h2 id="로그인-라우터-기능-구현"><a href="#로그인-라우터-기능-구현" class="headerlink" title="로그인 라우터 기능 구현"></a>로그인 라우터 기능 구현</h2><p>아직 database 저장이나 session 을 이용한 로그인 / 로그아웃 기능은 없으므로,<br>기본 구조만 만들어보자.</p><p>routes/auth.route.js 는 아래와 같이 작성한다.</p><script src="//gist.github.com/60aeeb55653c63eaff0b55899b4388f3.js"></script><p>controller/auth.controller.js 는 아래와 같이 작성한다.</p><script src="//gist.github.com/a676cec6bdec61d1eaf7a4fc7db86ce2.js"></script><p>/auth/login 으로 요청이 들어오면, UserInfo.userid 와 UserInfo.password로<br>비교하여 로그인 성공/실패 redirect를 리턴한다.</p><p>/auth/create는 아무런 동작을 하지 않는다. </p><p>다음 포스팅은 express-session 과 mongoDB, passport를 이용해서 로그인을 마무리한다.</p><p>Done.</p>]]></content:encoded>
      
      <comments>https://akanamed.github.io/2020/01/06/Create-Game-api-server-with-node-js-express-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Create Game api server with node.js express-2</title>
      <link>https://akanamed.github.io/2020/01/03/Create-Game-api-server-with-node.js-express-2/</link>
      <guid>https://akanamed.github.io/2020/01/03/Create-Game-api-server-with-node.js-express-2/</guid>
      <pubDate>Fri, 03 Jan 2020 03:00:33 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://akanamed.github.io/2019/12/30/Create-Game-api-server-with-node.js-express-1/&quot;&gt;1편&lt;/a&gt;에서&lt;br&gt;만들었던 기본 구조에 babel 을 설정해보자.&lt;br&gt;ES5 로만 코드를 작성한다면, babel은 필요없을 지 모르나,&lt;br&gt;ES6+ 의 새로운 기능을 사용하기 위해 설치하자.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><a href="https://akanamed.github.io/2019/12/30/Create-Game-api-server-with-node.js-express-1/">1편</a>에서<br>만들었던 기본 구조에 babel 을 설정해보자.<br>ES5 로만 코드를 작성한다면, babel은 필요없을 지 모르나,<br>ES6+ 의 새로운 기능을 사용하기 위해 설치하자.</p><a id="more"></a><!-- toc --><h2 id="Babel-Configuration"><a href="#Babel-Configuration" class="headerlink" title="Babel Configuration"></a>Babel Configuration</h2><p><a href="https://babeljs.io/docs/en/usage" target="_blank" rel="external nofollow noopener noreferrer">바벨 가이드</a> 대로 설정하자.</p><h3 id="install-babel-package"><a href="#install-babel-package" class="headerlink" title="install babel package"></a>install babel package</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D @babel/core @babel/cli @babel/preset-env @babel/node</span><br></pre></td></tr></table></figure><p>node 환경이므로 @babel/node도 추가해준다.<br>package.json 에 아래와 같이 추가되었다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"@babel/cli"</span>: <span class="string">"^7.7.7"</span>,</span><br><span class="line">    <span class="string">"@babel/core"</span>: <span class="string">"^7.7.7"</span>,</span><br><span class="line">    <span class="string">"@babel/node"</span>: <span class="string">"^7.7.7"</span>,</span><br><span class="line">    <span class="string">"@babel/preset-env"</span>: <span class="string">"^7.7.7"</span>,</span><br></pre></td></tr></table></figure><h3 id="preset-설정"><a href="#preset-설정" class="headerlink" title="preset 설정"></a>preset 설정</h3><p>.babelrc 파일을 만들고 아래와 같이 정의해준다.<br>( 프로젝트의 root 에 파일을 만든다. )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"@babel/preset-env"</span>, &#123;</span><br><span class="line">                <span class="string">"targets"</span>: &#123;</span><br><span class="line">                    <span class="string">"node"</span>: <span class="string">"current"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Node.js 에서 babel 을 실행하기 위해 package.json 을<br>아래와 같이 수정하고 서버를 실행해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"babel-node src/bin/www"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br><span class="line">&gt; <span class="built_in">test</span>-api-server@0.0.0 start D:\<span class="built_in">test</span>-api-server</span><br><span class="line">&gt; babel-node src/bin/www</span><br><span class="line"></span><br><span class="line">Server Listening on 3000</span><br></pre></td></tr></table></figure><h3 id="nodemon-을-이용한-babel-node"><a href="#nodemon-을-이용한-babel-node" class="headerlink" title="nodemon 을 이용한 babel-node"></a>nodemon 을 이용한 babel-node</h3><p>개발환경에서는 코드 수정이 빈번하므로 nodemon을 이용한 babel-node 실행을 추가한다.<br>package.json</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"nodemon src/bin/www --exec babel-node"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="그러면-express-에서-babel은"><a href="#그러면-express-에서-babel은" class="headerlink" title="그러면 express 에서 babel은?"></a>그러면 express 에서 babel은?</h2><p>사실 이부분이 제일 중요할 것 같은데,<br>express-generator 로 생성한 프로젝트는 기본 실행이 bin/www 에서 이루어진다.<br>아래 app.js에서 29라인을 export default app; 으로 수정 후<br>bin/www 에서 import App from “../app”; 으로 선언하게 되면,<br>SyntaxError: Cannot use import statement outside a module 에러가 뜬다.</p><script src="//gist.github.com/b7a59fa048b6a9f9fa8db9050b789ac2.js"></script><p>즉, generator로 생성한 bin/www 는 단순히 서버 구동을 위한 코드이므로,<br>app.js 파일을 가져와 http 객체와 연결시켜주는 동작밖에 없다.<br>app.js에서의 export는 예외적으로 commonJS 문법으로 bin/www에 넘겨주어야 한다.</p><h3 id="express-에서-babel로-트랜스파일링"><a href="#express-에서-babel로-트랜스파일링" class="headerlink" title="express 에서 babel로 트랜스파일링"></a>express 에서 babel로 트랜스파일링</h3><p>1편에서 만들었던 폴더 구조에 app.js 도 src 폴더 아래에 옮겨주자.<br>package.json 에 babel transfiling 을 추가한다.<br>babel 로 src 폴더에 있는 *.js 파일들을 -w ( -watch와 동일: 파일 자동변경 감지) 옵션과<br>-d 옵션으로 (–out-dir와 동일: target directory ) dist 폴더에 변환하겠다는 의미이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"babel src -w -d dist"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>그리고 빌드를 하게 되면 dist 폴더가 생기면서 변환된 파일들이 생성된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>최종 폴더구조</p><img src="/2020/01/03/Create-Game-api-server-with-node.js-express-2/folder.PNG" class title="This is an example image"><h4 id="변환된-파일-실행을-위한-마지막-구성"><a href="#변환된-파일-실행을-위한-마지막-구성" class="headerlink" title="변환된 파일 실행을 위한 마지막 구성"></a>변환된 파일 실행을 위한 마지막 구성</h4><p>.eslintignore 에 dist 폴더 이하는 검사기에서 제외하도록 아래와 같이 추가해준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist/*</span><br></pre></td></tr></table></figure><p>express-generator 로 프로젝트를 생성하게 되면 src/bin/www 의 파일은 트랜스파일링이 되지 않는다.<br>따라서 dist 폴더 아래에 bin/www 를 그대로 복사해서 옮겨놓자.<br>그리고 babel 로 빌드한 dist/bin/www 를 실행해보자</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ C:\GameApiServer&gt;node dist/bin/www</span><br><span class="line">Server Listening on 3000</span><br></pre></td></tr></table></figure><p>Done.</p>]]></content:encoded>
      
      <comments>https://akanamed.github.io/2020/01/03/Create-Game-api-server-with-node.js-express-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>eslint configuration setting</title>
      <link>https://akanamed.github.io/2019/12/31/eslint-configuration-setting/</link>
      <guid>https://akanamed.github.io/2019/12/31/eslint-configuration-setting/</guid>
      <pubDate>Tue, 31 Dec 2019 01:36:22 GMT</pubDate>
      <description>
      
        &lt;p&gt;.eslintrc.json 파일에서 rules 관련 옵션들을 추가한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>.eslintrc.json 파일에서 rules 관련 옵션들을 추가한다.</p><a id="more"></a><!-- toc --><p>이전글 : <a href="https://akanamed.github.io/2019/12/26/Setting-eslint-in-nodejs/">Setting eslint in nodejs</a><br>eslint 패키지를 설치하고 init 을 하면 아래와 같은 json 파일이 생성된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"env"</span>: &#123;</span><br><span class="line">        <span class="string">"commonjs"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"node"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"extends"</span>: [</span><br><span class="line">        <span class="string">"airbnb-base"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"globals"</span>: &#123;</span><br><span class="line">        <span class="string">"Atomics"</span>: <span class="string">"readonly"</span>,</span><br><span class="line">        <span class="string">"SharedArrayBuffer"</span>: <span class="string">"readonly"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"parserOptions"</span>: &#123;</span><br><span class="line">        <span class="string">"ecmaVersion"</span>: 2018</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"rules"</span>: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eslint.json 의 rules 항목에는,<br>추가한 rule을 error 로 설정해서 따르지 않으면 수정하게 에러를 뱉어내거나<br>rule을 turn off 으로 설정해서 검사를 안하게 하는 등의 옵션들을 추가할 수 있다.</p><h3 id="rule-관련-수정"><a href="#rule-관련-수정" class="headerlink" title="rule 관련 수정"></a>rule 관련 수정</h3><p><a href="https://github.com/airbnb/javascript" target="_blank" rel="external nofollow noopener noreferrer">Airbnb JavaScript Style Guide</a> 깃헙 문서에 잘 나와있다.</p><p>airbnb 스타일은 들여쓰기에 대해 강제하지는 않는 것 같다.<br>보기좋게 4칸으로 고정하는 옵션을 추가한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"indent"</span>: [</span><br><span class="line">        <span class="string">"error"</span>,</span><br><span class="line">        4</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>아래 샘플로 작성한 파일이다. airbnb 스타일의 eslint 에서 에러로 표시되는 항목은 다음과 같다.</p><figure class="highlight objc"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var express = require(<span class="string">'express'</span>);</span><br><span class="line">var tempFunc = function(err) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var testFunc = (err, function(next) &#123;</span><br><span class="line">  console.log(<span class="string">'err'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>no-var : var 대신에 let, const 사용<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const express = require(<span class="string">'express'</span>);</span><br></pre></td></tr></table></figure></li><li>import/newline-after-import : import 및 require 선언 후 한줄 공백이 필요<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const express = require(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line">const tempFunc = <span class="keyword">function</span>(err) &#123;</span><br></pre></td></tr></table></figure></li><li>space-before-function-paren : 함수 괄호 앞에 공백이 필요<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const tempFunc = <span class="keyword">function</span> (err) &#123;</span><br></pre></td></tr></table></figure></li><li>prefer-arrow-callback: 콜백함수는 화살표 함수로 사용<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const testFunc = (err, (next) =&gt; &#123;</span><br></pre></td></tr></table></figure></li><li>no-undef: 정의되지 않은 변수 사용, 여기서는 err 변수<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const err = undefined;</span><br><span class="line">const testFunc = (err, (next) =&gt; &#123;</span><br></pre></td></tr></table></figure></li><li>func-names: 함수 표현식에 이름이 있어야함<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const tempFunc = (err) =&gt; 1;</span><br><span class="line">or</span><br><span class="line">const tempFunc = <span class="keyword">function</span> <span class="built_in">test</span>(err) &#123;</span><br></pre></td></tr></table></figure></li></ol><p>no-console 은 콘솔 사용금지인데, node.js 환경에서 디버그 용도로 확인해야하므로<br>turn off 설정해주자.<br>no-unused-vars: 함수안의 파라미터가 선언은 되었지만 사용은 하지 않음인데,<br>마찬가지로 rules 에 추가하여 turn off 로 제외시키자.</p><p>“off” or 0 - 규칙 해제<br>“warn” or 1 - 규칙을 경고로 설정<br>“error” or 2 - 규칙을 오류로 설정</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"no-unused-vars"</span>: 0,</span><br><span class="line">    <span class="string">"no-console"</span>: 0</span><br></pre></td></tr></table></figure><p>최종 수정된 코드</p><figure class="highlight objc"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = require(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tempFunc = (err) =&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> err = undefined;</span><br><span class="line"><span class="keyword">const</span> testFunc = (err, (next) =&gt; &#123;</span><br><span class="line">    console.log(<span class="string">'err'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="–fix-옵션으로-수정"><a href="#–fix-옵션으로-수정" class="headerlink" title="–fix 옵션으로 수정"></a>–fix 옵션으로 수정</h3><p>–fix 옵션으로 자동 수정을 해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ .\node_modules\.bin\eslint test.js --fix</span><br><span class="line">// 결과</span><br><span class="line">D:\<span class="built_in">test</span>\test.js</span><br><span class="line">  3:18  warning  Unexpected unnamed <span class="keyword">function</span>  func-names</span><br><span class="line">  7:19  error    <span class="string">'err'</span> is not defined         no-undef</span><br><span class="line">  7:24  warning  Unexpected unnamed <span class="keyword">function</span>  func-names</span><br></pre></td></tr></table></figure><p>거의 대부분은 다 자동으로 잡아주지만,<br>func-names 는 warning 으로, no-undef 는 error 로 출력이 되었다.</p><p>공식 도큐먼트에는 func-names 는 디버깅에 도움이 되도록 함수 표현식 이름을<br>지정하라고 나와있다.<br>함수 이름을 생략하면 함수에서 예외 발생 시, 스택에서 (anonymous function) 으로 표시된다.<br>따라서 이름을 주던지, arrow function 으로 바꾸면 해결 할 수 있다.<br>no-undef 는 변수 선언 시, 항상 const 혹은 let을 사용하라고 나와있다.</p><p>최종 수정된 코드</p><figure class="highlight objc"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = require(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tempFunc = (err) =&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> err = undefined;</span><br><span class="line"><span class="keyword">const</span> testFunc = (err, (next) =&gt; &#123;</span><br><span class="line">    console.log(<span class="string">'err'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="rules-configuration"><a href="#rules-configuration" class="headerlink" title="rules configuration"></a>rules configuration</h3><p>거의 대부분은 airbnb 스타일에 따라 수정해가면 되지만, 그 외 조금 불필요한 옵션들이나<br>설정해야하는 옵션들은 turn off 혹은 error 처리로 정의했다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"semi"</span>: [</span><br><span class="line">            <span class="string">"error"</span>,</span><br><span class="line">            <span class="string">"always"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"indent"</span>: [</span><br><span class="line">        <span class="string">"error"</span>,</span><br><span class="line">        4</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"no-unused-vars"</span>: 0,</span><br><span class="line">    <span class="string">"no-console"</span>: 0,</span><br><span class="line">    <span class="string">"keyword-spacing"</span>: 0,               // <span class="keyword">if</span>문 다음에 공백이 필요함.</span><br><span class="line">    <span class="string">"comma-dangle"</span>: [<span class="string">"error"</span>, <span class="string">"never"</span>], // 후행 쉼표 허용안함</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://akanamed.github.io/2019/12/31/eslint-configuration-setting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Create Game api server with node.js express-1</title>
      <link>https://akanamed.github.io/2019/12/30/Create-Game-api-server-with-node.js-express-1/</link>
      <guid>https://akanamed.github.io/2019/12/30/Create-Game-api-server-with-node.js-express-1/</guid>
      <pubDate>Mon, 30 Dec 2019 01:47:11 GMT</pubDate>
      <description>
      
        &lt;p&gt;Game api 서버를 만들어보자.&lt;br&gt;&lt;a href=&quot;https://nodejs.org/ko/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;공식 홈페이지&lt;/a&gt;에서 Node.js 최신버전을 다운한다.&lt;br&gt;이 글을 쓰는 현재 공홈 최신 LTS 버전은 12.14.0 이다.&lt;br&gt;난 로컬에 이미 설치한 버전은 10.16.3 이다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Game api 서버를 만들어보자.<br><a href="https://nodejs.org/ko/" target="_blank" rel="external nofollow noopener noreferrer">공식 홈페이지</a>에서 Node.js 최신버전을 다운한다.<br>이 글을 쓰는 현재 공홈 최신 LTS 버전은 12.14.0 이다.<br>난 로컬에 이미 설치한 버전은 10.16.3 이다.</p><a id="more"></a><!-- toc --><h2 id="Node-js-버전업"><a href="#Node-js-버전업" class="headerlink" title="Node.js 버전업"></a>Node.js 버전업</h2><p>그럼 Node.js 버전업을 해보자.<br>Windows 에서 node 버전업은 최신 LTS msi 를 다운받아 새로 설치하면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v12.14.0</span><br></pre></td></tr></table></figure><h2 id="server-side-framework-만들기-with-express-generator"><a href="#server-side-framework-만들기-with-express-generator" class="headerlink" title="server-side framework 만들기 with express-generator"></a>server-side framework 만들기 with express-generator</h2><p>Express 애플리케이션 생성기라고 불리우는, express-generator 를 이용해 서버를 만들게 되면,<br>Server-side 용으로 쓰기엔 불필요한 파일(템플릿 엔진 등 )들이 많아서 별도의 작업이 필요한데,<br><a href="https://www.freecodecamp.org/news/how-to-enable-es6-and-beyond-syntax-with-node-and-express-68d3e11fe1ab/" target="_blank" rel="external nofollow noopener noreferrer">해당 링크</a> 를 다시 재해석해서 프레임워크를 만들어보자.</p><h3 id="프로젝트-생성"><a href="#프로젝트-생성" class="headerlink" title="프로젝트 생성"></a>프로젝트 생성</h3><p>express 생성기를 글로벌 패키지로 설치하자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g express-generator</span><br></pre></td></tr></table></figure><p>혹은 npm 5.3 버전 이상부터는 npx 커맨드가 지원되는데,<br><a href="https://geonlee.tistory.com/32" target="_blank" rel="external nofollow noopener noreferrer">npx</a>는 글로벌 설치가 아니라 1회성 설치,<br>즉 최신 버전에 해당하는 패키지를 설치하여 실행하고, 실행 후에 패키지를 제거한다고 나와있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx express-generator</span><br></pre></td></tr></table></figure><p><a href="https://expressjs.com/ko/starter/generator.html" target="_blank" rel="external nofollow noopener noreferrer">Express</a> 에는 템플릿 엔진을 사용한 가이드가 있지만,<br>server-side 로 만들 예정이므로, 아래처럼 커맨드를 입력해서 생성하자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ express <span class="built_in">test</span>-api-server --no-view</span><br><span class="line"></span><br><span class="line">   create : <span class="built_in">test</span>-api-server\</span><br><span class="line">   create : <span class="built_in">test</span>-api-server\public\</span><br><span class="line">   create : <span class="built_in">test</span>-api-server\public\javascripts\</span><br><span class="line">   create : <span class="built_in">test</span>-api-server\public\images\     </span><br><span class="line">   create : <span class="built_in">test</span>-api-server\public\stylesheets\</span><br><span class="line">   create : <span class="built_in">test</span>-api-server\public\stylesheets\style.css</span><br><span class="line">   create : <span class="built_in">test</span>-api-server\routes\</span><br><span class="line">   create : <span class="built_in">test</span>-api-server\routes\index.js</span><br><span class="line">   create : <span class="built_in">test</span>-api-server\routes\users.js</span><br><span class="line">   create : <span class="built_in">test</span>-api-server\public\index.html</span><br><span class="line">   create : <span class="built_in">test</span>-api-server\app.js</span><br><span class="line">   create : <span class="built_in">test</span>-api-server\package.json</span><br><span class="line">   create : <span class="built_in">test</span>-api-server\bin\</span><br><span class="line">   create : <span class="built_in">test</span>-api-server\bin\www</span><br><span class="line"></span><br><span class="line">   change directory:</span><br><span class="line">     &gt; <span class="built_in">cd</span> <span class="built_in">test</span>-api-server</span><br><span class="line"></span><br><span class="line">   install dependencies:</span><br><span class="line">     &gt; npm install</span><br><span class="line"></span><br><span class="line">   run the app:</span><br><span class="line">     &gt; SET DEBUG=<span class="built_in">test</span>-api-server:* &amp; npm start</span><br></pre></td></tr></table></figure><h3 id="프로젝트-세팅-및-변경"><a href="#프로젝트-세팅-및-변경" class="headerlink" title="프로젝트 세팅 및 변경"></a>프로젝트 세팅 및 변경</h3><p>템플릿 엔진관련 폴더는 생성되지 않고 만들어졌다.<br>test-api-server 로 이동 후 npm install 커맨드를 실행한다.<br>public 폴더는 제거하고, src 폴더 생성 후 bin , routes 폴더를 src 폴더 밑으로 이동한다.<br>그리고 routes 폴더의 users.js 도 제거한다.</p><p>src 폴더를 생성한 이유는 babel 이나 webpack 을 이용해 빌드를 해서,<br>dist 폴더로 구분하기 위해서다.</p><p>여기까지의 폴더 구조는 아래와 같다.</p><img src="/2019/12/30/Create-Game-api-server-with-node.js-express-1/test-api-1.PNG" class title="This is an example image"><h4 id="코드-수정"><a href="#코드-수정" class="headerlink" title="코드 수정"></a>코드 수정</h4><p>이제 코드를 수정하자.<br>src/bin/www 파일을 열어서 아래와 같이 app모듈의 참조 경로를 수정해준다.</p><figure class="highlight objc"><figcaption><span>src/bin/www</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var app = require(<span class="string">'../../app'</span>);</span><br></pre></td></tr></table></figure><p>package.json 의 npm script 경로를 아래와 같이 바꿔준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"node src/bin/www"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>app.js 파일 수정<br>아래에 사용하지 않는 코드는 다 지워준다.</p><figure class="highlight objc"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var usersRouter = require(<span class="string">'./routes/users'</span>);</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br><span class="line">app.use(<span class="string">'/users'</span>, usersRouter);</span><br></pre></td></tr></table></figure><p>그리고 템플릿 엔진 사용하지않고 프로젝트를 만들었기 때문에,<br>에러관련 처리 코드도 추가해줘야한다.</p><figure class="highlight objc"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">    var err = new Error(<span class="string">'Sorry cant find that!'</span>);</span><br><span class="line">    err.status = <span class="number">404</span>;</span><br><span class="line">    next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">    console.error(err.stack);</span><br><span class="line">    res.status(err.status || <span class="number">500</span>);</span><br><span class="line">    res.send(err.message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>app.js 에서 routes/index 의 참조 경로를 바꿔준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var indexRouter = require(<span class="string">'./src/routes/index'</span>);</span><br></pre></td></tr></table></figure><p>src/routes/index.js 에서 router.get 부분에 res.render를 send로 바꾼다.<br>템플릿 엔진이 없으므로 render 는 사용되지 않는다.</p><figure class="highlight objc"><figcaption><span>src/routes/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.send(&#123; title: <span class="string">'Express'</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="로컬-실행-및-확인"><a href="#로컬-실행-및-확인" class="headerlink" title="로컬 실행 및 확인"></a>로컬 실행 및 확인</h3><p>여기까지 왔다면, 이제 아래 커맨드 입력 시, 서버가 정상 실행된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">test</span>-api-server@0.0.0 start D:\<span class="built_in">test</span>-api-server</span><br><span class="line">&gt; node src/bin/www</span><br></pre></td></tr></table></figure><p><a href="http://localhost:3000/" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:3000/</a> 로 브라우저에서 접속해보면,<br>{“title”:”Express”} 문자열이 찍히는 걸 볼 수 있다.</p><h3 id="nodemon-설치"><a href="#nodemon-설치" class="headerlink" title="nodemon 설치"></a>nodemon 설치</h3><p>개발을 하다보면 수정 및 변경 후 확인을 위해 매번 npm start 커맨드를 입력하기가 번거로우므로<br><a href="https://akanamed.github.io/2019/12/27/Debugging-Nodejs-in-VSCode/">nodemon</a> 을 설치하자.<br>package.json 의 npm script 를 아래와 같이 바꿔준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"nodemon src/bin/www"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>서버를 실행해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br><span class="line">D:\<span class="built_in">test</span>-api-server&gt;npm start</span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">test</span>-api-server@0.0.0 start D:\<span class="built_in">test</span>-api-server</span><br><span class="line">&gt; nodemon src/bin/www</span><br><span class="line"></span><br><span class="line">[nodemon] 2.0.2</span><br><span class="line">[nodemon] to restart at any time, enter <span class="string">'rs'</span></span><br><span class="line">[nodemon] watching dir(s): *.*</span><br><span class="line">[nodemon] watching extensions: js,mjs,json</span><br><span class="line">[nodemon] starting <span class="string">'node src/bin/www'</span></span><br></pre></td></tr></table></figure><p><a href="http://localhost:3000/1" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:3000/1</a> 을 입력하게 되면 app.js에 추가했었던 에러관련 코드도 볼 수 있다.</p><p>여기까지 기본적인 Server-side 프레임워크를 만들어보았다.<br><a href="https://www.freecodecamp.org/news/how-to-enable-es6-and-beyond-syntax-with-node-and-express-68d3e11fe1ab/" target="_blank" rel="external nofollow noopener noreferrer">해당 링크</a> 에서는 babel관련 패키지, npm-run-all, rimraf 패키지, 빌드환경 설정등이 나와있지만, 기본 설정은 여기까지만으로도 충분하다고 생각된다.</p><p>번외)<br>해당 링크대로 심플하게 Server-side 용으로 프로젝트를 구성하였지만,<br>express (프로젝트명) –view=pug 로 생성 후 customizing 해도 될 것 같다.<br>위 생성과 차이점이라면, http-errors 패키지 포함 여부밖에 없다.</p><p>이제 기본 설정된 프로젝트를 개선하고 추가할 일만 남았다.</p><p>Done.</p>]]></content:encoded>
      
      <comments>https://akanamed.github.io/2019/12/30/Create-Game-api-server-with-node.js-express-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Debugging Nodejs in VSCode</title>
      <link>https://akanamed.github.io/2019/12/27/Debugging-Nodejs-in-VSCode/</link>
      <guid>https://akanamed.github.io/2019/12/27/Debugging-Nodejs-in-VSCode/</guid>
      <pubDate>Fri, 27 Dec 2019 07:10:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;visual studio code 에서 node.js 디버깅은 정말 간단하다.&lt;br&gt;그 외 nodemon 을 이용한 디버그 방법도 있다.&lt;br&gt;여기서는 기본 디버그 설정과 nodemon 디버그 설정 2가지만 다룬다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>visual studio code 에서 node.js 디버깅은 정말 간단하다.<br>그 외 nodemon 을 이용한 디버그 방법도 있다.<br>여기서는 기본 디버그 설정과 nodemon 디버그 설정 2가지만 다룬다.</p><a id="more"></a><!-- toc --><h2 id="기본-launch-를-이용한-디버그-설정"><a href="#기본-launch-를-이용한-디버그-설정" class="headerlink" title="기본 launch 를 이용한 디버그 설정"></a>기본 launch 를 이용한 디버그 설정</h2><p>ctrl + shift + D 키를 눌러서 상단 톱니바퀴를 누르거나,<br>메뉴 - 디버그 - 구성열기를 선택하면<br>해당 프로젝트의 .vscode 폴더 아래에 launch.json 파일이 생성된다.</p><h3 id="launch-json-파일"><a href="#launch-json-파일" class="headerlink" title="launch.json 파일"></a>launch.json 파일</h3><p>생성된 launch.json 파일은 아래와 같다.</p><figure class="highlight objc"><figcaption><span>launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// IntelliSense를 사용하여 가능한 특성에 대해 알아보세요.</span></span><br><span class="line">    <span class="comment">// 기존 특성에 대한 설명을 보려면 가리킵니다.</span></span><br><span class="line">    <span class="comment">// 자세한 내용을 보려면 https://go.microsoft.com/fwlink/?linkid=830387을(를) 방문하세요.</span></span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">            <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"프로그램 시작"</span>,</span><br><span class="line">            <span class="string">"skipFiles"</span>: [</span><br><span class="line">                <span class="string">"&lt;node_internals&gt;/**"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;\\bin\\www"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F5 (디버그 시작) 을 누르면, 아래 디버그 콘솔에 Debugger attached.가 출력되며,<br>디버깅을 할 수 있는 상태가 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\nodejs\node.exe --inspect-brk=6936 bin\www </span><br><span class="line">Debugger listening on ws://127.0.0.1:6936/69776105-213c-4108-95d8-05da7bf9fdab</span><br><span class="line">For <span class="built_in">help</span>, see: https://nodejs.org/en/docs/inspector</span><br><span class="line">Debugger attached.</span><br></pre></td></tr></table></figure><h2 id="nodemon-을-이용한-디버그-설정"><a href="#nodemon-을-이용한-디버그-설정" class="headerlink" title="nodemon 을 이용한 디버그 설정"></a>nodemon 을 이용한 디버그 설정</h2><p>nodemon 이란, 소스의 변경사항을 모니터링하고 서버를 자동으로 다시 시작하는 유틸리티입니다.<br>라고 <a href="https://nodemon.io/" target="_blank" rel="external nofollow noopener noreferrer">공식홈페이지</a> 에 나와있다.<br>글로벌 설치로 가이드 되어 있지만, 로컬설치를 하게되면 시스템 경로에서 nodemon을 사용할 수는<br>없고 아래 설명하겠지만, package.json 에 npm scripts로 추가하여 호출할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev nodemon</span><br></pre></td></tr></table></figure><p>package.json에 npm 스크립트를 추가해야하는데, start 와 debug 를 아래와 같이 추가한다.</p><figure class="highlight objc"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">        <span class="string">"start"</span>: <span class="string">"nodemon ./bin/www"</span>,</span><br><span class="line">        <span class="string">"debug"</span>: <span class="string">"nodemon --inspect ./bin/www"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>npm script 를 이용한 nodemon으로 서버 실행하는 방법</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br><span class="line"></span><br><span class="line">[nodemon] 1.19.3</span><br><span class="line">[nodemon] to restart at any time, enter `rs`</span><br><span class="line">[nodemon] watching dir(s): *.*</span><br><span class="line">[nodemon] watching extensions: js,mjs,json</span><br><span class="line">[nodemon] starting `./bin/www`</span><br><span class="line">2019-12-27 16:45:20.157 +0900 [<span class="built_in">test</span>] info : API Server Listening on 127.0.0.1:3000</span><br></pre></td></tr></table></figure><h3 id="launch-json에-nodemon-디버그-설정"><a href="#launch-json에-nodemon-디버그-설정" class="headerlink" title="launch.json에 nodemon 디버그 설정"></a>launch.json에 nodemon 디버그 설정</h3><p>생성된 launch.json에 nodemon 설정을 아래와 같이 추가해준다.</p><figure class="highlight objc"><figcaption><span>launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">            <span class="string">"request"</span>: <span class="string">"attach"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Node: Nodemon"</span>,</span><br><span class="line">            <span class="string">"processId"</span>:<span class="string">"$&#123;command:PickProcess&#125;"</span>,</span><br><span class="line">            <span class="string">"restart"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"protocol"</span>: <span class="string">"inspector"</span>,</span><br><span class="line">            <span class="string">"skipFiles"</span>: [</span><br><span class="line">                <span class="string">"&lt;node_internals&gt;/**"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본 디버깅과 차이점은 “request”: “attach” 항목이다.<br>서버를 실행한 후 디버그에서 프로세스 연결을 해줘야 한다.</p><h3 id="nodemon-으로-디버깅하기"><a href="#nodemon-으로-디버깅하기" class="headerlink" title="nodemon 으로 디버깅하기"></a>nodemon 으로 디버깅하기</h3><p>아래와 같이 command를 입력. 디버그 프로세스를 실행한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npm run debug</span><br><span class="line"></span><br><span class="line">[nodemon] 1.19.3</span><br><span class="line">[nodemon] to restart at any time, enter `rs`</span><br><span class="line">[nodemon] watching dir(s): *.*</span><br><span class="line">[nodemon] watching extensions: js,mjs,json</span><br><span class="line">[nodemon] starting `--inspect ./bin/www`</span><br><span class="line">Debugger listening on ws://127.0.0.1:9229/d62df68b-7c8e-416a-9a78-8351eabc2871</span><br><span class="line">For <span class="built_in">help</span>, see: https://nodejs.org/en/docs/inspector</span><br><span class="line">2019-12-27 16:55:42.882 +0900 [<span class="built_in">test</span>] info : API Server Listening on 127.0.0.1:3000</span><br></pre></td></tr></table></figure><p>그럼 이제 마지막으로 프로세스 연결을 위해서 디버그로 이동한다음 아래 이미지처럼</p><img src="/2019/12/27/Debugging-Nodejs-in-VSCode/nodemon.PNG" class title="This is an example image"><p>상단 Node:Nodemon을 선택하고 F5를 실행하거나 초록색 플레이 버튼을 누르게 되면, 실행중인<br>node processes 리스트들이 나오는데 –inspector로 실행된 프로세스를 선택하면<br>Debugger attached. 가 터미널에 출력되며, 디버깅 가능한 상태가 된다.</p><p>Done.</p><p>[ 참고 자료 ]<br><a href="https://github.com/Microsoft/vscode-recipes/tree/master/nodemon" target="_blank" rel="external nofollow noopener noreferrer">Node.js debugging in VS Code with Nodemon</a><br><a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging" target="_blank" rel="external nofollow noopener noreferrer">Node.js debugging in VS Code</a></p>]]></content:encoded>
      
      <comments>https://akanamed.github.io/2019/12/27/Debugging-Nodejs-in-VSCode/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Setting eslint in nodejs</title>
      <link>https://akanamed.github.io/2019/12/26/Setting-eslint-in-nodejs/</link>
      <guid>https://akanamed.github.io/2019/12/26/Setting-eslint-in-nodejs/</guid>
      <pubDate>Thu, 26 Dec 2019 07:08:08 GMT</pubDate>
      <description>
      
        &lt;p&gt;eslint : Javascript 코드에서 발견된 문제 패턴을 식별하기 위한 정적 코드 분석 도구.&lt;br&gt;문법 에러 뿐만 아니라 코딩 스타일도 정할 수 있어 유용하다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>eslint : Javascript 코드에서 발견된 문제 패턴을 식별하기 위한 정적 코드 분석 도구.<br>문법 에러 뿐만 아니라 코딩 스타일도 정할 수 있어 유용하다.</p><a id="more"></a><!-- toc --><h3 id="eslint-설치"><a href="#eslint-설치" class="headerlink" title="eslint 설치"></a>eslint 설치</h3><p>npm install 시, -D 옵션을 주게 되면 현재 프로젝트 기준 로컬에 설치되며,<br>package.json &gt; “devdependencies” 항목에 추가되어<br>production 으로 배포 시, 해당 모듈은 포함하지 않는다.</p><blockquote><p>-D 는 –save-dev 와 같다.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D eslint</span><br><span class="line">$ </span><br><span class="line">$ 실행결과</span><br><span class="line">$ + eslint@6.8.0</span><br><span class="line">$ added 120 packages from 81 contributors and audited 305 packages <span class="keyword">in</span> 11.633s</span><br></pre></td></tr></table></figure><h4 id="node-js-환경을-위한-eslint-설정파일-만들기"><a href="#node-js-환경을-위한-eslint-설정파일-만들기" class="headerlink" title="node js 환경을 위한 eslint 설정파일 만들기"></a>node js 환경을 위한 eslint 설정파일 만들기</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ .\node_modules\.bin\eslint --init</span><br><span class="line">$ </span><br><span class="line">// 구문을 확인하고 문제를 찾고 코드 스타일 적용</span><br><span class="line">? How would you like to use ESLint? To check syntax, find problems, and enforce code style</span><br><span class="line">// 프로젝트에 Babel 이 설치되어 있으면(React, Vue 등) Javascript 옵션을 선택하고, </span><br><span class="line">// babel과 관련없는 node js 프로젝트 및 기타 자바 스크립트 프로젝트이면 CommonJS 선택</span><br><span class="line">? What <span class="built_in">type</span> of modules does your project use? CommonJS (require/exports)</span><br><span class="line">// node js 를 사용하므로 None of these 사용</span><br><span class="line">? Which framework does your project use? None of these</span><br><span class="line">// TypeScript 사용안함</span><br><span class="line">? Does your project use TypeScript? No</span><br><span class="line">// Node 환경에서 코드 실행</span><br><span class="line">? Where does your code run? Node</span><br><span class="line">// 인기있는 스타일 가이드 ( air-bnb 스타일 가이드 사용을 위해.)</span><br><span class="line">? How would you like to define a style <span class="keyword">for</span> your project? Use a popular style guide</span><br><span class="line">? Which style guide <span class="keyword">do</span> you want to follow? Airbnb: </span><br><span class="line">// .eslintrc 파일의 구성형식 ( js, yml, json 중 선택)</span><br><span class="line">? What format <span class="keyword">do</span> you want your config file to be <span class="keyword">in</span>? JSON</span><br><span class="line">Checking peerDependencies of eslint-config-airbnb-base@latest</span><br><span class="line">The config that you have selected requires the following dependencies:</span><br><span class="line">eslint-config-airbnb-base@latest eslint@^5.16.0 || ^6.1.0 eslint-plugin-import@^2.18.2</span><br><span class="line">// 지금 npm 이용해서 위 모듈들 설치</span><br><span class="line">? Would you like to install them now with npm? Yes</span><br><span class="line">Installing eslint-config-airbnb-base@latest, eslint@^5.16.0 || ^6.1.0, eslint-plugin-import@^2.18.2</span><br><span class="line">npm WARN test1@1.0.0 No description</span><br><span class="line">npm WARN test1@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ eslint-config-airbnb-base@14.0.0</span><br><span class="line">+ eslint-plugin-import@2.19.1</span><br><span class="line">+ eslint@6.8.0</span><br><span class="line">added 55 packages from 34 contributors, updated 1 package and audited 513 packages <span class="keyword">in</span> 5.957s</span><br><span class="line"> </span><br><span class="line">16 packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  run npm fund <span class="keyword">for</span> details</span><br><span class="line"> </span><br><span class="line">found 0 vulnerabilities</span><br><span class="line">Successfully created .eslintrc.json file <span class="keyword">in</span> D:\test1</span><br></pre></td></tr></table></figure><p>위와 같이 선택했다면, .eslintrc.json 파일이 추가되어 있음을 볼 수 있다.</p><h4 id="vscode-에-eslint-설치하기"><a href="#vscode-에-eslint-설치하기" class="headerlink" title="vscode 에 eslint 설치하기"></a>vscode 에 eslint 설치하기</h4><p>ctrl+shift+x 키를 누르면, extensions 마켓 플레이스 창이 뜨는데, eslint 를 검색 후 install 한다.<br>install 후 vs code 재시작 및 적용 확인.</p><h3 id="eslint-rule-세팅"><a href="#eslint-rule-세팅" class="headerlink" title="eslint rule 세팅"></a>eslint rule 세팅</h3><p>아래와 같이 간단히 코드를 작성한다.</p><figure class="highlight objc"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var express = require(<span class="string">'express'</span>);</span><br><span class="line">var app = express();</span><br><span class="line">app.get(<span class="string">'/'</span>, function (req, res) &#123;</span><br><span class="line">    res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>, function () &#123;</span><br><span class="line">    console.log(<span class="string">'Example app listening on port 3000!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>아래 이미지 처럼 주황색 언더라인을 볼 수 있는데,<br>air-bnb 코딩스타일 혹은 문법에 맞지 않는다는 표시가 나타난다.</p><img src="/2019/12/26/Setting-eslint-in-nodejs/app.PNG" class title="This is an example image"><h4 id="스타일-및-문법에-맞게-수정"><a href="#스타일-및-문법에-맞게-수정" class="headerlink" title="스타일 및 문법에 맞게 수정"></a>스타일 및 문법에 맞게 수정</h4><p>아래 이미지 처럼 오류가 생긴 줄 위에 커서를 위치하면, <span class="highlight-text danger">빠른수정...</span>툴팁이 나오는데,</p><img src="/2019/12/26/Setting-eslint-in-nodejs/app1.PNG" class title="This is an example image"><p>툴팁을 클릭 -&gt; Fix this {rules} problem 으로 수정을 선택하면 자동으로 수정을 해준다.</p><blockquote><p>Fix all {rules} problems 는 소스파일에서 발생한 해당 rules 관련 문제를 일괄 수정해준다.</p></blockquote><p>eslint 공식문서: <a href="https://eslint.org/docs/rules/" target="_blank" rel="external nofollow noopener noreferrer">Rules Documents</a><br>위 공식문서를 참고해서, Search the docs 에 해당 rule을 검색하면,<br>오류 원인, Rule Details, Examples, When Not To Use It 등 해당 rule의 가이드를 볼 수 있다.<br>가이드 문서에는 –fix 옵션으로 command를 입력하게 되면 사소한 에러들은 자동으로 고쳐주므로, 적용해보면</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .\node_modules\.bin\eslint app.js --fix</span><br></pre></td></tr></table></figure><figure class="highlight objc"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = require(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  console.log(<span class="string">'Example app listening on port 3000!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위 와 같이 변경이 된다.</p><p>그 외, .eslintrc.json 에서 “rules” 에 검사를 무시할 rule 추가라던가, 세미콜론, 탭 크기 등<br>여러가지 설정에 관한 Configuration 은 추 후 따로 포스팅으로 정리를 해야겠다.</p>]]></content:encoded>
      
      <comments>https://akanamed.github.io/2019/12/26/Setting-eslint-in-nodejs/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hexo tranquilpeak 테마 적용 삽질기</title>
      <link>https://akanamed.github.io/2019/12/23/hexo-tranquilpeak-themes/</link>
      <guid>https://akanamed.github.io/2019/12/23/hexo-tranquilpeak-themes/</guid>
      <pubDate>Mon, 23 Dec 2019 02:30:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;얼마전 부터 뭔가 정리를 하나씩 해야겠다는 생각에 github 블로그를 만들어보고자 했다.&lt;br&gt;결론부터 얘기하면 쉽지 않았다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>얼마전 부터 뭔가 정리를 하나씩 해야겠다는 생각에 github 블로그를 만들어보고자 했다.<br>결론부터 얘기하면 쉽지 않았다.</p><a id="more"></a><!-- toc --><p>github 블로그는 거의 대부분 jekyll 테마를 적용하는 듯 해서 시도를 해보았지만,<br>ruby 설치부터 적용까지가 쉽지 않았다. ( 결과적으로는 실패했다. )<br>그러던 중에 hexo 테마를 검색하게 되었고, nodejs 기반이라 익숙하기도 했으며,<br>조금 난관에 부딪히기도 했지만 성공적으로 만들게 되었다.</p><p>아래는 hexo tranquilpeak 테마 적용에 대해 도움을 많이 받은 사이트<br><a href="https://jeyolog.github.io/2018/08/11/tranquilpeak-configuration/" target="_blank" rel="external nofollow noopener noreferrer">hexo tranquilpeak 테마 환경 설정</a><br><a href="https://mingpd.github.io/2019/04/14/github-blog-with-hexo-1/" target="_blank" rel="external nofollow noopener noreferrer">Github 블로그 만들기 with Hexo</a></p><p>정말 위 사이트로 들어가서 따라하면 금방 만들어진다.</p><p>하지만 지금 이 블로그의 tranquilpeak 테마 버전의 최신 release는 3.1.1 이며,<br>내가 수정한 것에 대한 삽질기를 기록으로 남긴다.</p><h3 id="title-클릭-시-깨짐-문제"><a href="#title-클릭-시-깨짐-문제" class="headerlink" title="title 클릭 시 깨짐 문제"></a>title 클릭 시 깨짐 문제</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line">$ http://localhost:4000/</span><br></pre></td></tr></table></figure><p>로컬 실행모드로 블로그가 제대로 동작하는걸 확인했으나, 한가지 문제가 있었다.<br>포스트 상단의 header 를 클릭하면, home 이 동작해야 하는데 %20 관련 GET 에러가 뜬다.</p><p>위 에러 관련 수정은 아래와 같다.</p><figure class="highlight plain"><figcaption><span>themes/tranquilpeak/layout/header.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;header-title&quot;&gt;</span><br><span class="line">    &lt;a</span><br><span class="line">        class&#x3D;&quot;header-title-link&quot;</span><br><span class="line">        href&#x3D;&quot;&lt;%- url_for(&#39;&#39;) %&gt;&quot;</span><br><span class="line">        aria-label&#x3D;&quot;&lt;% __(&#39;global.go_to_homepage&#39;) %&gt;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">        &lt;%&#x3D; config.title %&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>위 href 의 url_for(‘%20’) 부분을 url_for(‘’) 로 변경하면 된다.</p><h3 id="utterances-댓글-기능-추가"><a href="#utterances-댓글-기능-추가" class="headerlink" title="utterances 댓글 기능 추가"></a>utterances 댓글 기능 추가</h3><p>기본적으로 tranquilpeak 테마에는 utterances 기능이 없는 듯 하여, 추가하였다.</p><p>아래는 utterances 설정에 대한 참조사이트<br><a href="https://swtpumpkin.github.io/git/hexo/hexoCommentUtterances/" target="_blank" rel="external nofollow noopener noreferrer">hexo utterances 댓글 추가</a></p><p>이제 tranquilpeak 테마에 적용하기 위한 작업은 아래와 같다.</p><h4 id="utterances-ejs-파일-생성"><a href="#utterances-ejs-파일-생성" class="headerlink" title="utterances.ejs 파일 생성"></a>utterances.ejs 파일 생성</h4><p>위 링크대로 진행하게 되면 최종 script가 생성되는데 , Copy 버튼을 눌러 복사한 후<br>themes/tranquilpeak/layout/_partial/post 폴더 아래에 utternaces.ejs 파일을 하나 생성한 다음<br>복사한 script를 붙여넣고 저장한다.</p><figure class="highlight plain"><figcaption><span>themes/tranquilpeak/layout/_partial/post/utterances.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;utteranc.es&#x2F;client.js&quot;</span><br><span class="line">        repo&#x3D;&quot;&#123;userid&#125;&#x2F;blog-comments&quot;</span><br><span class="line">        issue-term&#x3D;&quot;title&quot;</span><br><span class="line">        theme&#x3D;&quot;github-light&quot;</span><br><span class="line">        crossorigin&#x3D;&quot;anonymous&quot;</span><br><span class="line">        async&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>위 repo의 {userid}는 본인의 github의 사용자 계정명이다.</p><h4 id="config-yml-에-utterances-enable-true-설정"><a href="#config-yml-에-utterances-enable-true-설정" class="headerlink" title="_config.yml 에 utterances enable:true 설정"></a>_config.yml 에 utterances enable:true 설정</h4><p>아래 comment systems 주석을 찾아서 utterances 항목처럼 추가</p><figure class="highlight plain"><figcaption><span>themes/tranquilpeak/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># ---------------</span><br><span class="line"># Comment systems</span><br><span class="line"># ---------------</span><br><span class="line">...</span><br><span class="line">utterances:</span><br><span class="line">    enable: true</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="post-ejs-변경"><a href="#post-ejs-변경" class="headerlink" title="post.ejs 변경"></a>post.ejs 변경</h4><p>아래 post.comments 를 찾아 else if 구문처럼 추가</p><figure class="highlight plain"><figcaption><span>themes/tranquilpeak/layout/_partial/post.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;article class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;% if (post.comments) &#123; %&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;% &#125; else if (theme.utterances.enable) &#123; %&gt;</span><br><span class="line">            &lt;%- partial(&#39;post&#x2F;utterances&#39;) %&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="LastUpdated-기능-추가"><a href="#LastUpdated-기능-추가" class="headerlink" title="LastUpdated 기능 추가"></a>LastUpdated 기능 추가</h3><p>아래 front matter - post.md 는 hexo new ‘title’ 로 생성할 때마다 아래 양식에 맞춰 생성되게끔<br>커스터마이징한 것이며, lastUpdated 기능 추가를 위해 updated 를 아래처럼 추가.</p><figure class="highlight plain"><figcaption><span>scaffolds/post.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo tranquilpeak 테마 적용 삽질기</span><br><span class="line">date: 1577068258000</span><br><span class="line">updated:</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure><p>그럼 이제 themes/tranquilpeak 에서 몇군데에 코드를 수정해줘야한다.<br>ko.yml 에 date_format 아래에 updated_format 을 추가.</p><figure class="highlight plain"><figcaption><span>themes/tranquilpeak/languages/ko.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">date_format: &quot;YYYY&#x2F;MM&#x2F;DD HH:mm:ss&quot;</span><br><span class="line">updated_format: &quot;YYYY&#x2F;MM&#x2F;DD HH:mm:ss&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>아래 경로대로 찾아가서 meta.ejs 에 아래 코드를 추가.<br>post.md에서 추가했던 updated 를 표시하기 위한 코드.</p><figure class="highlight html"><figcaption><span>themes/tranquilpeak/layout/_partial/post/meta.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.updated</span>) &#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> '<span class="attr">LastUpdated</span> '  %&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"&lt;%= post.date.format() %&gt;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.lang</span>) &#123; %&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.updated.locale</span>(<span class="attr">post.lang</span>)<span class="attr">.format</span>(<span class="attr">__</span>('<span class="attr">updated_format</span>')) %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.updated.locale</span>(<span class="attr">page.lang</span>)<span class="attr">.format</span>(<span class="attr">__</span>('<span class="attr">updated_format</span>')) %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>_config.yml 에 use_date_for_updated  항목이 false 로 되어 있는지 확인.<br>true로 되어있다면, false 로 바꿔준다.</p><blockquote><p>true로 설정하게 되면, updated 가 포스트 생성 날짜로 사용한다는 의미<br>주의 : _config.yml 은 테마폴더 안의 파일이 아니고 프로젝트의 파일</p></blockquote><h3 id="로컬에서-최종-적용-확인-및-deploy"><a href="#로컬에서-최종-적용-확인-및-deploy" class="headerlink" title="로컬에서 최종 적용 확인 및 deploy"></a>로컬에서 최종 적용 확인 및 deploy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>Done.</p>]]></content:encoded>
      
      <comments>https://akanamed.github.io/2019/12/23/hexo-tranquilpeak-themes/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Set Config MongoDB</title>
      <link>https://akanamed.github.io/2019/12/20/Set-Config-MongoDB/</link>
      <guid>https://akanamed.github.io/2019/12/20/Set-Config-MongoDB/</guid>
      <pubDate>Fri, 20 Dec 2019 06:23:32 GMT</pubDate>
      <description>
      
        &lt;p&gt;MongoDB 를 설치하게 되면 기본 구성파일은 Windows 기준으로 /install directory/bin/mongod.cfg 에 위치한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>MongoDB 를 설치하게 되면 기본 구성파일은 Windows 기준으로 /install directory/bin/mongod.cfg 에 위치한다.</p><a id="more"></a><!-- toc --><p>mongod.cfg 는 YAML 형식을 사용한다.<br>( YAML 은 들여 쓰기, 탭 문자가 지원되지 않고, 공백을 사용해야 한다.)</p><p>MongoDB 3.6부터는 기본적으로 localhost에 바인딩 되는데,<br>외부에서도 접속하게 허용할려면 cfg를 수정해야한다.</p><h3 id="command로-현재-버전-확인"><a href="#command로-현재-버전-확인" class="headerlink" title="command로 현재 버전 확인"></a>command로 현재 버전 확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ mongo --version</span><br><span class="line"></span><br><span class="line">MongoDB shell version v4.2.1</span><br><span class="line">git version: edf6d45851c0b9ee15548f0f847df141764a317e</span><br><span class="line">allocator: tcmalloc</span><br><span class="line">modules: none</span><br><span class="line">build environment:</span><br><span class="line">    distmod: 2012plus</span><br><span class="line">    distarch: x86_64</span><br><span class="line">    target_arch: x86_64</span><br></pre></td></tr></table></figure><h4 id="cfg-파일을-직접-변경"><a href="#cfg-파일을-직접-변경" class="headerlink" title="cfg 파일을 직접 변경"></a>cfg 파일을 직접 변경</h4><p>에디터로 파일을 열게 되면, 아래와 같은 내용을 볼 수 있다.</p><figure class="highlight plain"><figcaption><span>mongod.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> - for documentation of all options, see:</span><br><span class="line">   http:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual&#x2F;reference&#x2F;configuration-options&#x2F;</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: C:\Program Files\MongoDB\Server\4.2\data</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  engine:</span><br><span class="line">  mmapv1:</span><br><span class="line">  wiredTiger:</span><br><span class="line"></span><br><span class="line">- where to write logging data.</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path:  C:\Program Files\MongoDB\Server\4.2\log\mongod.log</span><br><span class="line"></span><br><span class="line">- network interfaces</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1</span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">security:</span><br><span class="line">operationProfiling:</span><br><span class="line">replication:</span><br><span class="line">sharding:</span><br><span class="line">-- Enterprise-Only Options:</span><br><span class="line">auditLog:</span><br><span class="line">snmp:</span><br></pre></td></tr></table></figure><p>net: bindIp를 0.0.0.0 으로 바꾸면 모든 ip주소에 바인딩이 되며, 외부에서도 접속할 수 있다.<br>보안상의 이유로 허용할 ip만 접속하게 한다면, 아래처럼 기입하면 된다.</p><figure class="highlight plain"><figcaption><span>mongod.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1, 10.0.0.10, 10.0.0.25</span><br></pre></td></tr></table></figure><p>변경 후 mongo db server를 재시작 및 확인.</p><h4 id="mongo-shell-에서-변경"><a href="#mongo-shell-에서-변경" class="headerlink" title="mongo shell 에서 변경"></a>mongo shell 에서 변경</h4><p>아래 처럼 –bind_ip 를 옵션으로 주게 되면, cfg 의 net: bind_ip 를 override 해서 mongodb 를 재시작한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongod --bind_ip 0.0.0.0</span><br></pre></td></tr></table></figure><p>Done.</p>]]></content:encoded>
      
      <comments>https://akanamed.github.io/2019/12/20/Set-Config-MongoDB/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
