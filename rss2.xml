<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GameServerDevelop</title>
    <link>https://akanamed.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>기록을 위한 블로그</description>
    <pubDate>Thu, 26 Dec 2019 09:45:27 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>node.js 환경에서 eslint 설정하기</title>
      <link>https://akanamed.github.io/2019/12/26/node-js-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-eslint-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</link>
      <guid>https://akanamed.github.io/2019/12/26/node-js-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-eslint-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 26 Dec 2019 07:08:08 GMT</pubDate>
      <description>
      
        &lt;p&gt;eslint : Javascript 코드에서 발견된 문제 패턴을 식별하기 위한 정적 코드 분석 도구.&lt;br&gt;문법 에러 뿐만 아니라 코딩 스타일도 정할 수 있어 유용하다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>eslint : Javascript 코드에서 발견된 문제 패턴을 식별하기 위한 정적 코드 분석 도구.<br>문법 에러 뿐만 아니라 코딩 스타일도 정할 수 있어 유용하다.</p><a id="more"></a><!-- toc --><h3 id="eslint-설치"><a href="#eslint-설치" class="headerlink" title="eslint 설치"></a>eslint 설치</h3><p>npm install 시, -D 옵션을 주게 되면 현재 프로젝트 기준 로컬에 설치되며,<br>package.json &gt; “devdependencies” 항목에 추가되어<br>production 으로 배포 시, 해당 모듈은 포함하지 않는다.</p><blockquote><p>-D 는 –save-dev 와 같다.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D eslint</span><br><span class="line">$ </span><br><span class="line">$ 실행결과</span><br><span class="line">$ + eslint@6.8.0</span><br><span class="line">$ added 120 packages from 81 contributors and audited 305 packages <span class="keyword">in</span> 11.633s</span><br></pre></td></tr></table></figure><h4 id="node-js-환경을-위한-eslint-설정파일-만들기"><a href="#node-js-환경을-위한-eslint-설정파일-만들기" class="headerlink" title="node js 환경을 위한 eslint 설정파일 만들기"></a>node js 환경을 위한 eslint 설정파일 만들기</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ .\node_modules\.bin\eslint --init</span><br><span class="line">$ </span><br><span class="line">// 구문을 확인하고 문제를 찾고 코드 스타일 적용</span><br><span class="line">? How would you like to use ESLint? To check syntax, find problems, and enforce code style</span><br><span class="line">// 프로젝트에 Babel 이 설치되어 있으면(React, Vue 등) Javascript 옵션을 선택하고, </span><br><span class="line">// babel과 관련없는 node js 프로젝트 및 기타 자바 스크립트 프로젝트이면 CommonJS 선택</span><br><span class="line">? What <span class="built_in">type</span> of modules does your project use? CommonJS (require/exports)</span><br><span class="line">// node js 를 사용하므로 None of these 사용</span><br><span class="line">? Which framework does your project use? None of these</span><br><span class="line">// TypeScript 사용안함</span><br><span class="line">? Does your project use TypeScript? No</span><br><span class="line">// Node 환경에서 코드 실행</span><br><span class="line">? Where does your code run? Node</span><br><span class="line">// 인기있는 스타일 가이드 ( air-bnb 스타일 가이드 사용을 위해.)</span><br><span class="line">? How would you like to define a style <span class="keyword">for</span> your project? Use a popular style guide</span><br><span class="line">? Which style guide <span class="keyword">do</span> you want to follow? Airbnb: </span><br><span class="line">// .eslintrc 파일의 구성형식 ( js, yml, json 중 선택)</span><br><span class="line">? What format <span class="keyword">do</span> you want your config file to be <span class="keyword">in</span>? JSON</span><br><span class="line">Checking peerDependencies of eslint-config-airbnb-base@latest</span><br><span class="line">The config that you have selected requires the following dependencies:</span><br><span class="line">eslint-config-airbnb-base@latest eslint@^5.16.0 || ^6.1.0 eslint-plugin-import@^2.18.2</span><br><span class="line">// 지금 npm 이용해서 위 모듈들 설치</span><br><span class="line">? Would you like to install them now with npm? Yes</span><br><span class="line">Installing eslint-config-airbnb-base@latest, eslint@^5.16.0 || ^6.1.0, eslint-plugin-import@^2.18.2</span><br><span class="line">npm WARN test1@1.0.0 No description</span><br><span class="line">npm WARN test1@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ eslint-config-airbnb-base@14.0.0</span><br><span class="line">+ eslint-plugin-import@2.19.1</span><br><span class="line">+ eslint@6.8.0</span><br><span class="line">added 55 packages from 34 contributors, updated 1 package and audited 513 packages <span class="keyword">in</span> 5.957s</span><br><span class="line"> </span><br><span class="line">16 packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  run npm fund <span class="keyword">for</span> details</span><br><span class="line"> </span><br><span class="line">found 0 vulnerabilities</span><br><span class="line">Successfully created .eslintrc.json file <span class="keyword">in</span> D:\test1</span><br></pre></td></tr></table></figure><p>위와 같이 선택했다면, .eslintrc.json 파일이 추가되어 있음을 볼 수 있다.</p><h4 id="vscode-에-eslint-설치하기"><a href="#vscode-에-eslint-설치하기" class="headerlink" title="vscode 에 eslint 설치하기"></a>vscode 에 eslint 설치하기</h4><p>ctrl+shift+x 키를 누르면, extensions 마켓 플레이스 창이 뜨는데, eslint 를 검색 후 install 한다.<br>install 후 vs code 재시작 및 적용 확인.</p><h3 id="eslint-rule-세팅"><a href="#eslint-rule-세팅" class="headerlink" title="eslint rule 세팅"></a>eslint rule 세팅</h3><p>아래와 같이 간단히 코드를 작성한다.</p><figure class="highlight objc"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var express = require(<span class="string">'express'</span>);</span><br><span class="line">var app = express();</span><br><span class="line">app.get(<span class="string">'/'</span>, function (req, res) &#123;</span><br><span class="line">    res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>, function () &#123;</span><br><span class="line">    console.log(<span class="string">'Example app listening on port 3000!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>아래 이미지 처럼 주황색 언더라인을 볼 수 있는데,<br>air-bnb 코딩스타일 혹은 문법에 맞지 않는다는 표시가 나타난다.</p><img src="/2019/12/26/node-js-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-eslint-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/app.PNG" class title="This is an example image"><h4 id="스타일-및-문법에-맞게-수정"><a href="#스타일-및-문법에-맞게-수정" class="headerlink" title="스타일 및 문법에 맞게 수정"></a>스타일 및 문법에 맞게 수정</h4><p>아래 이미지 처럼 오류가 생긴 줄 위에 커서를 위치하면, <span class="highlight-text danger">빠른수정...</span>툴팁이 나오는데,</p><img src="/2019/12/26/node-js-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-eslint-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/app1.PNG" class title="This is an example image"><p>툴팁을 클릭 -&gt; Fix this {rules} problem 으로 수정을 선택하면 자동으로 수정을 해준다.</p><blockquote><p>Fix all {rules} problems 는 소스파일에서 발생한 해당 rules 관련 문제를 일괄 수정해준다.</p></blockquote><p>eslint 공식문서: <a href="https://eslint.org/docs/rules/" target="_blank" rel="external nofollow noopener noreferrer">Rules Documents</a><br>위 공식문서를 참고해서, Search the docs 에 해당 rule을 검색하면,<br>오류 원인, Rule Details, Examples, When Not To Use It 등 해당 rule의 가이드를 볼 수 있다.<br>가이드 문서에는 –fix 옵션으로 command를 입력하게 되면 사소한 에러들은 자동으로 고쳐주므로, 적용해보면</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .\node_modules\.bin\eslint app.js --fix</span><br></pre></td></tr></table></figure><figure class="highlight objc"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = require(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  console.log(<span class="string">'Example app listening on port 3000!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위 와 같이 변경이 된다.</p><p>그 외, .eslintrc.json 에서 “rules” 에 검사를 무시할 rule 추가라던가, 세미콜론, 탭 크기 등<br>여러가지 설정에 관한 Configuration 은 추 후 따로 포스팅으로 정리를 해야겠다.</p>]]></content:encoded>
      
      <comments>https://akanamed.github.io/2019/12/26/node-js-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-eslint-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hexo tranquilpeak 테마 적용 삽질기</title>
      <link>https://akanamed.github.io/2019/12/23/hexo-tranquilpeak-%ED%85%8C%EB%A7%88-%EC%A0%81%EC%9A%A9-%EC%82%BD%EC%A7%88%EA%B8%B0/</link>
      <guid>https://akanamed.github.io/2019/12/23/hexo-tranquilpeak-%ED%85%8C%EB%A7%88-%EC%A0%81%EC%9A%A9-%EC%82%BD%EC%A7%88%EA%B8%B0/</guid>
      <pubDate>Mon, 23 Dec 2019 02:30:58 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;hexo-를-이용해-github-블로그-만들기&quot;&gt;&lt;a href=&quot;#hexo-를-이용해-github-블로그-만들기&quot; class=&quot;headerlink&quot; title=&quot;hexo 를 이용해 github 블로그 만들기&quot;&gt;&lt;/a&gt;hexo 를 이용해 github 블로그 만들기&lt;/h2&gt;&lt;p&gt;얼마전 부터 뭔가 정리를 하나씩 해야겠다는 생각에 github 블로그를 만들어보고자 했다.&lt;br&gt;결론부터 얘기하면 쉽지 않았다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="hexo-를-이용해-github-블로그-만들기"><a href="#hexo-를-이용해-github-블로그-만들기" class="headerlink" title="hexo 를 이용해 github 블로그 만들기"></a>hexo 를 이용해 github 블로그 만들기</h2><p>얼마전 부터 뭔가 정리를 하나씩 해야겠다는 생각에 github 블로그를 만들어보고자 했다.<br>결론부터 얘기하면 쉽지 않았다.</p><a id="more"></a><!-- toc --><p>github 블로그는 거의 대부분 jekyll 테마를 적용하는 듯 해서 시도를 해보았지만,<br>ruby 설치부터 적용까지가 쉽지 않았다. ( 결과적으로는 실패했다. )<br>그러던 중에 hexo 테마를 검색하게 되었고, nodejs 기반이라 익숙하기도 했으며,<br>조금 난관에 부딪히기도 했지만 성공적으로 만들게 되었다.</p><p>아래는 hexo tranquilpeak 테마 적용에 대해 도움을 많이 받은 사이트<br><a href="https://jeyolog.github.io/2018/08/11/tranquilpeak-configuration/" target="_blank" rel="external nofollow noopener noreferrer">hexo tranquilpeak 테마 환경 설정</a><br><a href="https://mingpd.github.io/2019/04/14/github-blog-with-hexo-1/" target="_blank" rel="external nofollow noopener noreferrer">Github 블로그 만들기 with Hexo</a></p><p>정말 위 사이트로 들어가서 따라하면 금방 만들어진다.</p><p>하지만 지금 이 블로그의 tranquilpeak 테마 버전의 최신 release는 3.1.1 이며,<br>내가 수정한 것에 대한 삽질기를 기록으로 남긴다.</p><h3 id="title-클릭-시-깨짐-문제"><a href="#title-클릭-시-깨짐-문제" class="headerlink" title="title 클릭 시 깨짐 문제"></a>title 클릭 시 깨짐 문제</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line">$ http://localhost:4000/</span><br></pre></td></tr></table></figure><p>로컬 실행모드로 블로그가 제대로 동작하는걸 확인했으나, 한가지 문제가 있었다.<br>포스트 상단의 header 를 클릭하면, home 이 동작해야 하는데 %20 관련 GET 에러가 뜬다.</p><p>위 에러 관련 수정은 아래와 같다.</p><figure class="highlight plain"><figcaption><span>themes/tranquilpeak/layout/header.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;header-title&quot;&gt;</span><br><span class="line">    &lt;a</span><br><span class="line">        class&#x3D;&quot;header-title-link&quot;</span><br><span class="line">        href&#x3D;&quot;&lt;%- url_for(&#39;&#39;) %&gt;&quot;</span><br><span class="line">        aria-label&#x3D;&quot;&lt;% __(&#39;global.go_to_homepage&#39;) %&gt;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">        &lt;%&#x3D; config.title %&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>위 href 의 url_for(‘%20’) 부분을 url_for(‘’) 로 변경하면 된다.</p><h3 id="utterances-댓글-기능-추가"><a href="#utterances-댓글-기능-추가" class="headerlink" title="utterances 댓글 기능 추가"></a>utterances 댓글 기능 추가</h3><p>기본적으로 tranquilpeak 테마에는 utterances 기능이 없는 듯 하여, 추가하였다.</p><p>아래는 utterances 설정에 대한 참조사이트<br><a href="https://swtpumpkin.github.io/git/hexo/hexoCommentUtterances/" target="_blank" rel="external nofollow noopener noreferrer">hexo utterances 댓글 추가</a></p><p>이제 tranquilpeak 테마에 적용하기 위한 작업은 아래와 같다.</p><h4 id="utterances-ejs-파일-생성"><a href="#utterances-ejs-파일-생성" class="headerlink" title="utterances.ejs 파일 생성"></a>utterances.ejs 파일 생성</h4><p>위 링크대로 진행하게 되면 최종 script가 생성되는데 , Copy 버튼을 눌러 복사한 후<br>themes/tranquilpeak/layout/_partial/post 폴더 아래에 utternaces.ejs 파일을 하나 생성한 다음<br>복사한 script를 붙여넣고 저장한다.</p><figure class="highlight plain"><figcaption><span>themes/tranquilpeak/layout/_partial/post/utterances.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;utteranc.es&#x2F;client.js&quot;</span><br><span class="line">        repo&#x3D;&quot;&#123;userid&#125;&#x2F;blog-comments&quot;</span><br><span class="line">        issue-term&#x3D;&quot;title&quot;</span><br><span class="line">        theme&#x3D;&quot;github-light&quot;</span><br><span class="line">        crossorigin&#x3D;&quot;anonymous&quot;</span><br><span class="line">        async&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>위 repo의 {userid}는 본인의 github의 사용자 계정명이다.</p><h4 id="config-yml-에-utterances-enable-true-설정"><a href="#config-yml-에-utterances-enable-true-설정" class="headerlink" title="_config.yml 에 utterances enable:true 설정"></a>_config.yml 에 utterances enable:true 설정</h4><p>아래 comment systems 주석을 찾아서 utterances 항목처럼 추가</p><figure class="highlight plain"><figcaption><span>themes/tranquilpeak/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># ---------------</span><br><span class="line"># Comment systems</span><br><span class="line"># ---------------</span><br><span class="line">...</span><br><span class="line">utterances:</span><br><span class="line">    enable: true</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="post-ejs-변경"><a href="#post-ejs-변경" class="headerlink" title="post.ejs 변경"></a>post.ejs 변경</h4><p>아래 post.comments 를 찾아 else if 구문처럼 추가</p><figure class="highlight plain"><figcaption><span>themes/tranquilpeak/layout/_partial/post.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;article class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;% if (post.comments) &#123; %&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;% &#125; else if (theme.utterances.enable) &#123; %&gt;</span><br><span class="line">            &lt;%- partial(&#39;post&#x2F;utterances&#39;) %&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="LastUpdated-기능-추가"><a href="#LastUpdated-기능-추가" class="headerlink" title="LastUpdated 기능 추가"></a>LastUpdated 기능 추가</h3><p>아래 front matter - post.md 는 hexo new ‘title’ 로 생성할 때마다 아래 양식에 맞춰 생성되게끔<br>커스터마이징한 것이며, lastUpdated 기능 추가를 위해 updated 를 아래처럼 추가.</p><figure class="highlight plain"><figcaption><span>scaffolds/post.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo tranquilpeak 테마 적용 삽질기</span><br><span class="line">date: 1577068258000</span><br><span class="line">updated:</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure><p>그럼 이제 themes/tranquilpeak 에서 몇군데에 코드를 수정해줘야한다.<br>ko.yml 에 date_format 아래에 updated_format 을 추가.</p><figure class="highlight plain"><figcaption><span>themes/tranquilpeak/languages/ko.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">date_format: &quot;YYYY&#x2F;MM&#x2F;DD HH:mm:ss&quot;</span><br><span class="line">updated_format: &quot;YYYY&#x2F;MM&#x2F;DD HH:mm:ss&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>아래 경로대로 찾아가서 meta.ejs 에 아래 코드를 추가.<br>post.md에서 추가했던 updated 를 표시하기 위한 코드.</p><figure class="highlight html"><figcaption><span>themes/tranquilpeak/layout/_partial/post/meta.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.updated</span>) &#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> '<span class="attr">LastUpdated</span> '  %&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"&lt;%= post.date.format() %&gt;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.lang</span>) &#123; %&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.updated.locale</span>(<span class="attr">post.lang</span>)<span class="attr">.format</span>(<span class="attr">__</span>('<span class="attr">updated_format</span>')) %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.updated.locale</span>(<span class="attr">page.lang</span>)<span class="attr">.format</span>(<span class="attr">__</span>('<span class="attr">updated_format</span>')) %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>_config.yml 에 use_date_for_updated  항목이 false 로 되어 있는지 확인.<br>true로 되어있다면, false 로 바꿔준다.</p><blockquote><p>true로 설정하게 되면, updated 가 포스트 생성 날짜로 사용한다는 의미<br>주의 : _config.yml 은 테마폴더 안의 파일이 아니고 프로젝트의 파일</p></blockquote><h3 id="로컬에서-최종-적용-확인-및-deploy"><a href="#로컬에서-최종-적용-확인-및-deploy" class="headerlink" title="로컬에서 최종 적용 확인 및 deploy"></a>로컬에서 최종 적용 확인 및 deploy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>Done.</p>]]></content:encoded>
      
      <comments>https://akanamed.github.io/2019/12/23/hexo-tranquilpeak-%ED%85%8C%EB%A7%88-%EC%A0%81%EC%9A%A9-%EC%82%BD%EC%A7%88%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>mongoDB config 세팅</title>
      <link>https://akanamed.github.io/2019/12/20/mongoDB-config-%EC%84%B8%ED%8C%85/</link>
      <guid>https://akanamed.github.io/2019/12/20/mongoDB-config-%EC%84%B8%ED%8C%85/</guid>
      <pubDate>Fri, 20 Dec 2019 06:23:32 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;mongoDB-cfg-설정하기&quot;&gt;&lt;a href=&quot;#mongoDB-cfg-설정하기&quot; class=&quot;headerlink&quot; title=&quot;mongoDB cfg 설정하기&quot;&gt;&lt;/a&gt;mongoDB cfg 설정하기&lt;/h2&gt;&lt;p&gt;MongoDB 를 설치하게 되면 기본 구성파일은 Windows 기준으로 /install directory/bin/mongod.cfg 에 위치한다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="mongoDB-cfg-설정하기"><a href="#mongoDB-cfg-설정하기" class="headerlink" title="mongoDB cfg 설정하기"></a>mongoDB cfg 설정하기</h2><p>MongoDB 를 설치하게 되면 기본 구성파일은 Windows 기준으로 /install directory/bin/mongod.cfg 에 위치한다.</p><a id="more"></a><!-- toc --><p>mongod.cfg 는 YAML 형식을 사용한다.<br>( YAML 은 들여 쓰기, 탭 문자가 지원되지 않고, 공백을 사용해야 한다.)</p><p>MongoDB 3.6부터는 기본적으로 localhost에 바인딩 되는데,<br>외부에서도 접속하게 허용할려면 cfg를 수정해야한다.</p><h3 id="command로-현재-버전-확인"><a href="#command로-현재-버전-확인" class="headerlink" title="command로 현재 버전 확인"></a>command로 현재 버전 확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ mongo --version</span><br><span class="line"></span><br><span class="line">MongoDB shell version v4.2.1</span><br><span class="line">git version: edf6d45851c0b9ee15548f0f847df141764a317e</span><br><span class="line">allocator: tcmalloc</span><br><span class="line">modules: none</span><br><span class="line">build environment:</span><br><span class="line">    distmod: 2012plus</span><br><span class="line">    distarch: x86_64</span><br><span class="line">    target_arch: x86_64</span><br></pre></td></tr></table></figure><h4 id="cfg-파일을-직접-변경"><a href="#cfg-파일을-직접-변경" class="headerlink" title="cfg 파일을 직접 변경"></a>cfg 파일을 직접 변경</h4><p>에디터로 파일을 열게 되면, 아래와 같은 내용을 볼 수 있다.</p><figure class="highlight plain"><figcaption><span>mongod.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> - for documentation of all options, see:</span><br><span class="line">   http:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual&#x2F;reference&#x2F;configuration-options&#x2F;</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: C:\Program Files\MongoDB\Server\4.2\data</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  engine:</span><br><span class="line">  mmapv1:</span><br><span class="line">  wiredTiger:</span><br><span class="line"></span><br><span class="line">- where to write logging data.</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path:  C:\Program Files\MongoDB\Server\4.2\log\mongod.log</span><br><span class="line"></span><br><span class="line">- network interfaces</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1</span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">security:</span><br><span class="line">operationProfiling:</span><br><span class="line">replication:</span><br><span class="line">sharding:</span><br><span class="line">-- Enterprise-Only Options:</span><br><span class="line">auditLog:</span><br><span class="line">snmp:</span><br></pre></td></tr></table></figure><p>net: bindIp를 0.0.0.0 으로 바꾸면 모든 ip주소에 바인딩이 되며, 외부에서도 접속할 수 있다.<br>보안상의 이유로 허용할 ip만 접속하게 한다면, 아래처럼 기입하면 된다.</p><figure class="highlight plain"><figcaption><span>mongod.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1, 10.0.0.10, 10.0.0.25</span><br></pre></td></tr></table></figure><p>변경 후 mongo db server를 재시작 및 확인.</p><h4 id="mongo-shell-에서-변경"><a href="#mongo-shell-에서-변경" class="headerlink" title="mongo shell 에서 변경"></a>mongo shell 에서 변경</h4><p>아래 처럼 –bind_ip 를 옵션으로 주게 되면, cfg 의 net: bind_ip 를 override 해서 mongodb 를 재시작한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongod --bind_ip 0.0.0.0</span><br></pre></td></tr></table></figure><p>Done.</p>]]></content:encoded>
      
      <comments>https://akanamed.github.io/2019/12/20/mongoDB-config-%EC%84%B8%ED%8C%85/#disqus_thread</comments>
    </item>
    
    <item>
      <title>express server</title>
      <link>https://akanamed.github.io/2019/12/17/express-server/</link>
      <guid>https://akanamed.github.io/2019/12/17/express-server/</guid>
      <pubDate>Tue, 17 Dec 2019 01:33:11 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;express-서버-만드는-두가지-방법&quot;&gt;&lt;a href=&quot;#express-서버-만드는-두가지-방법&quot; class=&quot;headerlink&quot; title=&quot;express 서버 만드는 두가지 방법&quot;&gt;&lt;/a&gt;express 서버 만드는 두가지 방법&lt;/h2&gt;&lt;p&gt;node js가 설치가 되어 있다는 가정하에 초 간단 express 웹 서버를 만드는 방법의 포스팅이다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="express-서버-만드는-두가지-방법"><a href="#express-서버-만드는-두가지-방법" class="headerlink" title="express 서버 만드는 두가지 방법"></a>express 서버 만드는 두가지 방법</h2><p>node js가 설치가 되어 있다는 가정하에 초 간단 express 웹 서버를 만드는 방법의 포스팅이다.</p><a id="more"></a><!-- toc --><h3 id="Command로-현재-버전확인"><a href="#Command로-현재-버전확인" class="headerlink" title="Command로 현재 버전확인"></a>Command로 현재 버전확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ node --version  </span><br><span class="line">v10.16.3</span><br><span class="line"></span><br><span class="line">$ npm --version</span><br><span class="line">6.13.4</span><br></pre></td></tr></table></figure><h3 id="1-Express-Genarator-이용"><a href="#1-Express-Genarator-이용" class="headerlink" title="(1)Express Genarator 이용"></a>(1)Express Genarator 이용</h3><p>npm 버전이 5.2.0 이상인 경우 아래의 <span class="highlight-text danger">npx</span> 커맨드로 쉽게 생성할 수 있다.<br>npx 설명 링크 : <a href="https://ljh86029926.gitbook.io/coding-apple-react/undefined/npm-npx" target="_blank" rel="external nofollow noopener noreferrer">npx란 무엇인가?</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx express-generator</span><br></pre></td></tr></table></figure><p>npm 버전이 이전 버전인 경우 글로벌 설치 후 express 서버를 만든다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g express-generator</span><br><span class="line">$ express --view=pug [폴더명]</span><br></pre></td></tr></table></figure><p>참고 : <a href="https://expressjs.com/en/starter/generator.html" target="_blank" rel="external nofollow noopener noreferrer">Express 공식사이트</a></p><h3 id="2-npm-init-이용"><a href="#2-npm-init-이용" class="headerlink" title="(2)npm init 이용"></a>(2)npm init 이용</h3><p>npm init 커맨드는 package.json을 생성하는데, -y 옵션을 주게 되면 알아서 내용을 채워준다.</p><h4 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">$</span><br><span class="line">$ This utility will walk you through creating a package.json file.</span><br><span class="line">$ It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">$ See `npm <span class="built_in">help</span> json` <span class="keyword">for</span> definitive documentation on these fields</span><br><span class="line">$ and exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">$ Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">$ save it as a dependency <span class="keyword">in</span> the package.json file.</span><br><span class="line"></span><br><span class="line">$ Press ^C at any time to quit.</span><br><span class="line">$ package name: (test1)</span><br><span class="line">$ version: (1.0.0)</span><br><span class="line">$ description: <span class="built_in">test</span> project</span><br><span class="line">$ entry point: (index.js)</span><br><span class="line">$ <span class="built_in">test</span> <span class="built_in">command</span>:</span><br><span class="line">$ git repository:</span><br><span class="line">$ keywords:</span><br><span class="line">$ author:</span><br><span class="line">$ license: (ISC)</span><br><span class="line">$ About to write to package.json:</span><br><span class="line"></span><br><span class="line">$ &#123;</span><br><span class="line">$   <span class="string">"name"</span>: <span class="string">"test1"</span>,</span><br><span class="line">$   <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">$   <span class="string">"description"</span>: <span class="string">"test project"</span>,</span><br><span class="line">$   <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">$   <span class="string">"scripts"</span>: &#123;</span><br><span class="line">$     <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">$   &#125;,</span><br><span class="line">$   <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">$   <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">$ &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ Is this OK? (yes)</span><br></pre></td></tr></table></figure><h4 id="npm-init-y"><a href="#npm-init-y" class="headerlink" title="npm init -y"></a>npm init -y</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br><span class="line"></span><br><span class="line">$ Wrote to package.json:</span><br><span class="line"></span><br><span class="line">$ &#123;</span><br><span class="line">$   <span class="string">"name"</span>: <span class="string">"test1"</span>,</span><br><span class="line">$   <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">$   <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">$   <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">$   <span class="string">"scripts"</span>: &#123;</span><br><span class="line">$     <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">$   &#125;,</span><br><span class="line">$   <span class="string">"keywords"</span>: [],</span><br><span class="line">$   <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">$   <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">$ &#125;</span><br></pre></td></tr></table></figure><h4 id="express-install"><a href="#express-install" class="headerlink" title="express install"></a>express install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express --save</span><br><span class="line"></span><br><span class="line">$ npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">$ + express@4.17.1</span><br><span class="line">$ added 50 packages from 37 contributors and audited 126 packages <span class="keyword">in</span> 2.785s</span><br><span class="line">$ found 0 vulnerabilities</span><br></pre></td></tr></table></figure><p>package.json -&gt; dependencies 에 express 가 추가 되었으며, package-lock.json 도 생성이 되었다.<br>해당 관련 설명은 아래 링크 참조.<br><a href="https://programmingsummaries.tistory.com/385" target="_blank" rel="external nofollow noopener noreferrer">package.json 설명 링크</a></p><p>해당 작업 디렉토리에 app.js 파일을 하나 생성한 후 아래와 같은 코드를 작성한다.</p><figure class="highlight objc"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var express = require(<span class="string">'express'</span>);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, function (req, res) &#123;</span><br><span class="line">    res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, function () &#123;</span><br><span class="line">    console.log(<span class="string">'Example app listening on port 3000!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="서버-실행"><a href="#서버-실행" class="headerlink" title="서버 실행"></a>서버 실행</h3><p>기본적인 실행방법은 아래 커맨드.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node app.js</span><br></pre></td></tr></table></figure><p>package.json 에 스크립트를 추가하여 서버 실행하는 방법.</p><figure class="highlight objc"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"node app.js"</span></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>간단하지만, 다음 포스팅에서는 express-generator를 이용해 api 서버를 만들었던<br>삽질기를 기록 해봐야겠다.</p>]]></content:encoded>
      
      <comments>https://akanamed.github.io/2019/12/17/express-server/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
